
import React, { useState, useEffect } from "react";
import { useGame } from "@/context/hooks/useGame";
import { Lightbulb, User, BadgeAlert } from "lucide-react";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { 
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { roles } from "@/utils/gameConfig";
import { toast } from "@/hooks/use-toast";

interface SpecializationTabProps {
  onAddEvent: (message: string, type: string) => void;
}

const SpecializationTab: React.FC<SpecializationTabProps> = ({ onAddEvent }) => {
  const { state, dispatch } = useGame();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const canChooseSpecialization = state.phase >= 3;
  
  // –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π
  const availableRoles = Object.values(roles).filter(role => role.phase <= state.phase);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const handleChooseSpecialization = (roleId: string) => {
    if (state.specialization === roleId) {
      toast({
        title: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞",
        description: `–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é ${roles[roleId].name}`,
        variant: "default",
      });
      return;
    }
    
    dispatch({ 
      type: "CHOOSE_SPECIALIZATION", 
      payload: { roleId } 
    });
    
    onAddEvent(`–í—ã–±—Ä–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${roles[roleId].name}`, "success");
  };
  
  if (!canChooseSpecialization) {
    return <SpecializationLocked phase={state.phase} />;
  }
  
  if (availableRoles.length === 0) {
    return (
      <div className="text-center py-6 text-gray-500">
        <User className="h-10 w-10 mx-auto mb-3 opacity-20" />
        <p className="text-xs">–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.<br />–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ.</p>
      </div>
    );
  }
  
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      {availableRoles.map(role => (
        <SpecializationCard 
          key={role.id}
          role={role}
          isSelected={state.specialization === role.id}
          onSelect={() => handleChooseSpecialization(role.id)}
        />
      ))}
    </div>
  );
};

const SpecializationLocked: React.FC<{ phase: number }> = ({ phase }) => {
  const nextPhase = Math.min(phase + 1, 6);
  
  return (
    <div className="text-center py-6 text-gray-500">
      <BadgeAlert className="h-10 w-10 mx-auto mb-3 opacity-20" />
      <p className="text-xs">–í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –§–∞–∑–µ 3.<br />–°–µ–π—á–∞—Å –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –§–∞–∑–µ {phase}.</p>
      
      <div className="mt-4">
        <Badge variant="outline" className="mx-auto">
          –§–∞–∑–∞ {nextPhase} —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–∑–∂–µ
        </Badge>
      </div>
    </div>
  );
};

const SpecializationCard: React.FC<{ 
  role: any, 
  isSelected: boolean,
  onSelect: () => void 
}> = ({ role, isSelected, onSelect }) => {
  const specializations: { [key: string]: { icon: React.ReactNode, color: string } } = {
    investor: { icon: <span className="text-lg">üíº</span>, color: "bg-amber-100 text-amber-800" },
    trader: { icon: <span className="text-lg">üìà</span>, color: "bg-blue-100 text-blue-800" },
    miner: { icon: <span className="text-lg">‚õèÔ∏è</span>, color: "bg-stone-100 text-stone-800" },
    influencer: { icon: <span className="text-lg">üåê</span>, color: "bg-purple-100 text-purple-800" },
    analyst: { icon: <span className="text-lg">üìä</span>, color: "bg-green-100 text-green-800" },
    founder: { icon: <span className="text-lg">üöÄ</span>, color: "bg-red-100 text-red-800" },
    arbitrageur: { icon: <span className="text-lg">‚öñÔ∏è</span>, color: "bg-indigo-100 text-indigo-800" },
  };
  
  const spec = specializations[role.id] || { icon: <User size={16} />, color: "bg-gray-100 text-gray-800" };
  
  return (
    <Card className={`overflow-hidden transition-all ${isSelected ? 'border-blue-500 shadow-md' : ''}`}>
      <CardHeader className={`p-3 ${spec.color}`}>
        <div className="flex items-center justify-between">
          <CardTitle className="text-sm flex items-center gap-2">
            {spec.icon} {role.name}
          </CardTitle>
          {isSelected && <Badge>–í—ã–±—Ä–∞–Ω–æ</Badge>}
        </div>
        <CardDescription className="text-[10px] mt-1 line-clamp-2">
          {role.description}
        </CardDescription>
      </CardHeader>
      <CardContent className="p-3">
        <h4 className="text-xs font-medium mb-1">–ë–æ–Ω—É—Å—ã:</h4>
        <ul className="space-y-1 text-[10px]">
          {Object.entries(role.bonuses).map(([key, value]) => {
            const formattedValue = Number(value) > 0 ? `+${Number(value) * 100}%` : `${Number(value) * 100}%`;
            const bonusText = formatBonusName(key, formattedValue);
            return (
              <li key={key} className="flex items-center gap-1">
                <span className="h-1 w-1 rounded-full bg-blue-500"></span>
                {bonusText}
              </li>
            );
          })}
        </ul>
      </CardContent>
      <Separator />
      <CardFooter className="p-2 flex justify-end">
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button 
                size="sm" 
                variant={isSelected ? "outline" : "default"}
                onClick={onSelect}
                className="text-[10px] h-7"
                disabled={isSelected}
              >
                {isSelected ? "–í—ã–±—Ä–∞–Ω–æ" : "–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"}
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p className="text-xs">
                {isSelected 
                  ? "–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é" 
                  : "–í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—Å—Ç –≤–∞–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã"
                }
              </p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
      </CardFooter>
    </Card>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –±–æ–Ω—É—Å–æ–≤
const formatBonusName = (key: string, value: string): string => {
  const bonusNames: { [key: string]: string } = {
    stakingIncome: `${value} –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É`,
    maxCrypto: `${value} –∫ –º–∞–∫—Å. —Ö—Ä–∞–Ω–µ–Ω–∏—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç`,
    portfolioVolatility: `${value} –∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è`,
    tradingProfit: `${value} –∫ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç —Ç—Ä–µ–π–¥–∏–Ω–≥–∞`,
    tradeSpeed: `${value} –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–¥–µ–ª–æ–∫`,
    automationBonus: `${value} –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏`,
    hashrateEfficiency: `${value} –∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ö–µ—à—Ä–µ–π—Ç–∞`,
    energyConsumption: `${value} –∫ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é`,
    blockFindChance: `${value} –∫ —à–∞–Ω—Å—É –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∞`,
    subscriberGrowth: `${value} –∫ —Ä–æ—Å—Ç—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`,
    reputationEfficiency: `${value} –∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏`,
    marketInfluence: `${value} –∫ –≤–ª–∏—è–Ω–∏—é –Ω–∞ —Ä—ã–Ω–æ–∫`,
    fundingEfficiency: `${value} –∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∞ —Å—Ä–µ–¥—Å—Ç–≤`,
    projectDevelopmentSpeed: `${value} –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤`,
    arbitrageProfitBoost: `${value} –∫ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–∞`,
    arbitrageOpportunitySpeed: `${value} –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞`
  };
  
  return bonusNames[key] || `${key}: ${value}`;
};

export default SpecializationTab;
