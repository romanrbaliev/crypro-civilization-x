
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Upgrade } from '@/context/types';
import { useGame } from '@/context/hooks/useGame';

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
const formatResourceValue = (value: number) => {
  if (value >= 1000000) {
    return `${(value / 1000000).toFixed(2)}M`;
  } else if (value >= 1000) {
    return `${(value / 1000).toFixed(2)}K`;
  } else {
    return value.toFixed(2);
  }
};

const getResourceIcon = (resourceId: string) => {
  switch (resourceId) {
    case 'knowledge': return 'üìö';
    case 'usdt': return 'üí≤';
    case 'electricity': return '‚ö°';
    case 'computingPower': return 'üñ•Ô∏è';
    case 'bitcoin': return '‚Çø';
    default: return 'üîπ';
  }
};

const getResourceColor = (resourceId: string) => {
  switch (resourceId) {
    case 'knowledge': return 'text-blue-600';
    case 'usdt': return 'text-green-600';
    case 'electricity': return 'text-yellow-600';
    case 'computingPower': return 'text-purple-600';
    case 'bitcoin': return 'text-amber-600';
    default: return 'text-gray-600';
  }
};

const canAfford = (resources: any, costs: any) => {
  if (!costs) return true;
  
  for (const resourceId in costs) {
    const resource = resources[resourceId];
    const cost = costs[resourceId];
    if (!resource || resource.value < cost) {
      return false;
    }
  }
  
  return true;
};

interface UpgradeItemProps {
  upgrade: Upgrade;
  index?: number;
  onAddEvent?: (message: string, type: string) => void;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
const UpgradeItem: React.FC<UpgradeItemProps> = ({ upgrade, index, onAddEvent }) => {
  const { state, dispatch } = useGame();
  const [hovered, setHovered] = useState(false);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è
  const handlePurchase = () => {
    if (!upgrade.unlocked || upgrade.purchased) return;
    
    const canBuy = canAfford(state.resources, upgrade.cost);
    if (!canBuy) return;
    
    dispatch({
      type: 'PURCHASE_UPGRADE',
      payload: { upgradeId: upgrade.id }
    });
    
    // –í—ã–∑—ã–≤–∞–µ–º onAddEvent, –µ—Å–ª–∏ –æ–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    if (onAddEvent) {
      onAddEvent(`–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ: ${upgrade.name}`, "success");
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è
  const getCardStyle = () => {
    if (upgrade.purchased) return 'bg-slate-100';
    if (!upgrade.unlocked) return 'bg-gray-100 opacity-70';
    if (hovered) return 'bg-blue-50';
    return 'bg-white';
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è
  const renderCost = () => {
    if (!upgrade.cost) return null;
    
    return Object.entries(upgrade.cost).map(([resourceId, amount]) => {
      const resource = state.resources[resourceId];
      if (!resource) return null;
      
      const canPay = resource.value >= amount;
      const textColor = canPay ? 'text-green-600' : 'text-red-600';
      
      return (
        <div key={resourceId} className="flex items-center space-x-1">
          <span className={`${getResourceColor(resourceId)}`}>
            {getResourceIcon(resourceId)}
          </span>
          <span className={textColor}>
            {formatResourceValue(amount)} {resource.name}
          </span>
        </div>
      );
    });
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–∏—è
  const renderEffects = () => {
    if (!upgrade.effects) return null;
    
    return Object.entries(upgrade.effects).map(([effectId, value]) => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
      let effectName = effectId;
      let effectValue = value;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º technicalId –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
      switch(effectId) {
        case 'knowledgeMaxBoost':
          effectName = '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∞–∫—Å. –∑–Ω–∞–Ω–∏–π';
          effectValue = value * 100;
          break;
        case 'knowledgeBoost':
          effectName = '–ë–æ–Ω—É—Å –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É –∑–Ω–∞–Ω–∏–π';
          effectValue = value * 100;
          break;
        case 'usdtMaxBoost':
          effectName = '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∞–∫—Å. USDT';
          effectValue = value * 100;
          break;
        case 'miningEfficiency':
          effectName = '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞';
          effectValue = value * 100;
          break;
        case 'energyEfficiency':
          effectName = '–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
          effectValue = value * 100;
          break;
        default:
          effectName = effectId;
      }
      
      return (
        <div key={effectId} className="text-sm">
          <span className="text-blue-600">
            {effectName}: +{effectValue}%
          </span>
        </div>
      );
    });
  };
  
  return (
    <Card
      className={`transition-colors ${getCardStyle()}`}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      <CardHeader className="px-4 py-2">
        <CardTitle className="text-lg">{upgrade.name}</CardTitle>
        <CardDescription className="text-sm">{upgrade.description}</CardDescription>
      </CardHeader>
      
      <CardContent className="px-4 py-2 space-y-2">
        <div className="space-y-1">
          <p className="text-xs font-semibold text-slate-500">–°—Ç–æ–∏–º–æ—Å—Ç—å:</p>
          {renderCost()}
        </div>
        
        <div className="space-y-1">
          <p className="text-xs font-semibold text-slate-500">–≠—Ñ—Ñ–µ–∫—Ç—ã:</p>
          {renderEffects()}
        </div>
      </CardContent>
      
      <CardFooter className="px-4 py-2">
        <Button 
          className="w-full" 
          variant={upgrade.purchased ? "secondary" : (upgrade.unlocked ? "default" : "outline")}
          disabled={!upgrade.unlocked || upgrade.purchased}
          onClick={handlePurchase}
        >
          {upgrade.purchased ? "–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ" : (upgrade.unlocked ? "–ö—É–ø–∏—Ç—å" : "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")}
        </Button>
      </CardFooter>
    </Card>
  );
};

export default UpgradeItem;
