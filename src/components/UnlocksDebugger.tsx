
import React from 'react';
import { useGame } from '@/context/hooks/useGame';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { debugUnlockStatus } from '@/utils/unlockManager';
import { 
  getUnlockedBuildingsByGroup, 
  getUnlockedUpgradesByGroup 
} from '@/utils/researchUtils';

const UnlocksDebugger: React.FC = () => {
  const { state, dispatch } = useGame();
  
  const [debugInfo, setDebugInfo] = React.useState<{
    unlocked: string[],
    locked: string[],
    steps: string[]
  }>({ unlocked: [], locked: [], steps: [] });
  
  const [isOpen, setIsOpen] = React.useState(false);
  
  const checkUnlocks = () => {
    const result = debugUnlockStatus(state);
    setDebugInfo({
      unlocked: result.unlocked || [],
      locked: result.locked || [],
      steps: result.steps || []
    });
  };
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
  React.useEffect(() => {
    if (isOpen) {
      checkUnlocks();
    }
  }, [isOpen, state]);
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  const forceCheckAll = () => {
    dispatch({ type: "FORCE_RESOURCE_UPDATE" });
    setTimeout(() => {
      checkUnlocks();
    }, 100);
  };
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
  const advancedBuildings = React.useMemo(() => {
    if (!isOpen) return null;
    
    // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∑–¥–∞–Ω–∏–π
    const advancedBuildingsList = ['miner', 'cryptoLibrary', 'coolingSystem', 'enhancedWallet'];
    const unlockedBuildings = getUnlockedBuildingsByGroup(state, advancedBuildingsList);
    
    // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    const advancedUpgradesList = [
      'cryptoCurrencyBasics', 
      'algorithmOptimization', 
      'proofOfWork', 
      'energyEfficientComponents', 
      'cryptoTrading', 
      'tradingBot'
    ];
    const unlockedUpgrades = getUnlockedUpgradesByGroup(state, advancedUpgradesList);
    
    return {
      unlockedBuildings,
      unlockedUpgrades
    };
  }, [isOpen, state]);
  
  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm" className="ml-2 text-gray-500 text-xs">
          üîç –û—Ç–ª–∞–¥–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[600px] max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>–û—Ç–ª–∞–¥–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</DialogTitle>
          <DialogDescription>
            –°—Ç–∞—Ç—É—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∏–≥—Ä–µ.
          </DialogDescription>
        </DialogHeader>
        
        <div className="flex gap-4 mb-3">
          <div className="flex-1">
            <h4 className="font-medium mb-2 text-sm">–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:</h4>
            <ul className="text-xs text-green-600">
              {debugInfo.unlocked.map((item, index) => (
                <li key={index}>‚úÖ {item}</li>
              ))}
            </ul>
          </div>
          <div className="flex-1">
            <h4 className="font-medium mb-2 text-sm">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:</h4>
            <ul className="text-xs text-gray-400">
              {debugInfo.locked.map((item, index) => (
                <li key={index}>‚ùå {item}</li>
              ))}
            </ul>
          </div>
        </div>
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∑–¥–∞–Ω–∏—è—Ö –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö */}
        {advancedBuildings && (
          <div className="border-t pt-3 mt-2">
            <h4 className="font-medium mb-2">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</h4>
            
            <div className="text-xs mb-2">
              <strong>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∑–¥–∞–Ω–∏—è:</strong>
              <ul className="ml-4">
                {['miner', 'cryptoLibrary', 'coolingSystem', 'enhancedWallet'].map(building => (
                  <li key={building} className={advancedBuildings.unlockedBuildings.includes(building) ? "text-green-600" : "text-gray-400"}>
                    {advancedBuildings.unlockedBuildings.includes(building) ? "‚úÖ" : "‚ùå"} {building}
                  </li>
                ))}
              </ul>
            </div>
            
            <div className="text-xs">
              <strong>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:</strong>
              <ul className="ml-4">
                {['cryptoCurrencyBasics', 'algorithmOptimization', 'proofOfWork', 'energyEfficientComponents', 'cryptoTrading', 'tradingBot'].map(upgrade => (
                  <li key={upgrade} className={advancedBuildings.unlockedUpgrades.includes(upgrade) ? "text-green-600" : "text-gray-400"}>
                    {advancedBuildings.unlockedUpgrades.includes(upgrade) ? "‚úÖ" : "‚ùå"} {upgrade}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        )}
        
        <div className="bg-gray-50 rounded p-3 mt-3 text-xs text-gray-600 max-h-60 overflow-y-auto">
          <h4 className="font-medium mb-2">–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç:</h4>
          {debugInfo.steps.map((step, index) => (
            <div 
              key={index} 
              className={
                step.includes("‚úÖ") ? "text-green-600" :
                step.includes("‚ùå") ? "text-red-500" :
                step.startsWith("‚Ä¢") ? "pl-2" :
                ""
              }
            >
              {step}
            </div>
          ))}
        </div>
        
        <DialogFooter className="mt-4">
          <Button variant="outline" size="sm" onClick={checkUnlocks} className="mr-2">
            –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
          </Button>
          <Button size="sm" onClick={forceCheckAll}>
            –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default UnlocksDebugger;
