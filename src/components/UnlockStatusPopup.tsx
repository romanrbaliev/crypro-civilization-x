
import React, { useState, useEffect } from 'react';
import { Unlock } from 'lucide-react';
import { useGame } from '@/context/hooks/useGame';
import { debugUnlockStatus } from '@/utils/unlockManager';
import { Button } from '@/components/ui/button';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';

const UnlockStatusPopup = () => {
  const { state, dispatch, forceUpdate } = useGame();
  const [statusSteps, setStatusSteps] = useState<string[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  
  const updateStatus = async () => {
    try {
      setLoading(true);
      
      // –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
      dispatch({ type: "FORCE_RESOURCE_UPDATE" });
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ–ª–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è
      setTimeout(() => {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
          const result = debugUnlockStatus(state);
          setStatusSteps(result.steps || []);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–¥–∞–Ω–∏—è
          console.log("–°—Ç–∞—Ç—É—Å enhancedWallet:", {
            exists: !!state.buildings.enhancedWallet,
            unlocked: state.buildings.enhancedWallet?.unlocked,
            walletLevel: state.buildings.cryptoWallet?.count
          });
          
          console.log("–°—Ç–∞—Ç—É—Å cryptoLibrary:", {
            exists: !!state.buildings.cryptoLibrary,
            unlocked: state.buildings.cryptoLibrary?.unlocked,
            hasUpgrade: state.upgrades.cryptoCurrencyBasics?.purchased
          });
          
          console.log("–°—Ç–∞—Ç—É—Å coolingSystem:", {
            exists: !!state.buildings.coolingSystem,
            unlocked: state.buildings.coolingSystem?.unlocked,
            computerLevel: state.buildings.homeComputer?.count
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –∑–¥–∞–Ω–∏—è –≤ state.buildings
          console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–¥–∞–Ω–∏–π –≤ state:", {
            enhancedWallet: 'enhancedWallet' in state.buildings,
            cryptoLibrary: 'cryptoLibrary' in state.buildings,
            coolingSystem: 'coolingSystem' in state.buildings
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
          console.log("–£—Å–ª–æ–≤–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", {
            enhancedWalletCondition: state.buildings.cryptoWallet?.count >= 5,
            cryptoLibraryCondition: state.upgrades.cryptoCurrencyBasics?.purchased === true,
            coolingSystemCondition: state.buildings.homeComputer?.count >= 2
          });
          
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫:', error);
          setStatusSteps(['–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: ' + error]);
        } finally {
          setLoading(false);
        }
      }, 100);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      setLoading(false);
    }
  };
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ popover
  const handleOpenChange = (open: boolean) => {
    if (open) {
      updateStatus();
    }
  };
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const forceUnlockAll = () => {
    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
    if (state.buildings.enhancedWallet) {
      dispatch({ 
        type: "SET_BUILDING_UNLOCKED", 
        payload: { buildingId: "enhancedWallet", unlocked: true } 
      });
    }
    
    // –ö—Ä–∏–ø—Ç–æ–±–∏–±–ª–∏–æ—Ç–µ–∫–∞
    if (state.buildings.cryptoLibrary) {
      dispatch({ 
        type: "SET_BUILDING_UNLOCKED", 
        payload: { buildingId: "cryptoLibrary", unlocked: true } 
      });
    }
    
    // –°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
    if (state.buildings.coolingSystem) {
      dispatch({ 
        type: "SET_BUILDING_UNLOCKED", 
        payload: { buildingId: "coolingSystem", unlocked: true } 
      });
    }
    
    // –ö—Ä–∏–ø—Ç–æ-—Å–æ–æ–±—â–µ—Å—Ç–≤–æ
    if (state.upgrades.cryptoCommunity) {
      dispatch({ 
        type: "SET_UPGRADE_UNLOCKED", 
        payload: { upgradeId: "cryptoCommunity", unlocked: true } 
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setTimeout(() => {
      dispatch({ type: "FORCE_RESOURCE_UPDATE" });
      updateStatus();
    }, 100);
  };
  
  return (
    <Popover onOpenChange={handleOpenChange}>
      <PopoverTrigger asChild>
        <Button 
          variant="outline" 
          size="sm" 
          className="h-8 px-2 text-xs gap-1 bg-white"
        >
          <Unlock className="h-3.5 w-3.5" /> 
          –°—Ç–∞—Ç—É—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-96 p-0">
        <div className="p-4 bg-white rounded-md">
          <h3 className="text-sm font-bold text-gray-700 mb-2">–°—Ç–∞—Ç—É—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h3>
          
          <div className="mt-2 p-2 bg-gray-50 rounded border text-xs text-gray-600 max-h-80 overflow-y-auto whitespace-pre-line">
            {loading ? (
              <div className="text-center py-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
            ) : (
              statusSteps.map((step, index) => (
                <div key={index} className={
                  step.includes('‚úÖ') ? 'text-green-600' : 
                  step.includes('‚ùå') ? 'text-red-500' : 
                  step.startsWith('‚Ä¢') ? 'pl-2' :
                  step.startsWith('üìä') || step.startsWith('üîì') || step.startsWith('üèóÔ∏è') || step.startsWith('üìö') || step.startsWith('üîç') ? 'font-semibold mt-2' : ''
                }>
                  {step}
                </div>
              ))
            )}
          </div>
          
          <div className="mt-3 flex justify-end gap-2">
            <Button 
              variant="outline" 
              size="sm" 
              className="text-xs" 
              onClick={forceUnlockAll}
            >
              –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
            </Button>
            <Button 
              variant="secondary" 
              size="sm" 
              className="text-xs" 
              onClick={updateStatus}
            >
              –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            </Button>
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
};

export default UnlockStatusPopup;
