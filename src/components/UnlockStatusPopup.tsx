
import React, { useState, useEffect } from 'react';
import { Unlock } from 'lucide-react';
import { useGame } from '@/context/hooks/useGame';
import { debugUnlockStatus } from '@/utils/debugCalculator';
import { Button } from '@/components/ui/button';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import { debugPracticeBuilding, debugBuildingDisplay, listAllBuildings } from '@/utils/buildingDebugUtils';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

const UnlockStatusPopup = () => {
  const { state, forceUpdate } = useGame();
  const [statusSteps, setStatusSteps] = useState<string[]>([]);
  const [unlockedItems, setUnlockedItems] = useState<string[]>([]);
  const [lockedItems, setLockedItems] = useState<string[]>([]);
  const [practiceStatus, setPracticeStatus] = useState<any>(null);
  const [buildingsStatus, setBuildingsStatus] = useState<any>(null);
  const [allBuildings, setAllBuildings] = useState<any[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  
  const updateStatus = async () => {
    try {
      setLoading(true);
      
      // –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
      forceUpdate();
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ–ª–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è
      setTimeout(() => {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
          const result = debugUnlockStatus(state);
          setStatusSteps(result.steps || []); // –®–∞–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π
          setUnlockedItems(result.unlocked || []); // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
          setLockedItems(result.locked || []); // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
          
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–∫—É –∑–¥–∞–Ω–∏—è "–ü—Ä–∞–∫—Ç–∏–∫–∞"
          const practiceDebug = debugPracticeBuilding(state);
          setPracticeStatus(practiceDebug);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∑–¥–∞–Ω–∏—è—Ö
          setAllBuildings(listAllBuildings(state));
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–¥–∞–Ω–∏–π
          const displayDebug = debugBuildingDisplay(state);
          setBuildingsStatus(displayDebug);
          
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫:', error);
          setStatusSteps(['–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: ' + error]);
        } finally {
          setLoading(false);
        }
      }, 100);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      setLoading(false);
    }
  };
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ popover
  const handleOpenChange = (open: boolean) => {
    if (open) {
      updateStatus();
    }
  };
  
  return (
    <Popover onOpenChange={handleOpenChange}>
      <PopoverTrigger asChild>
        <Button 
          variant="outline" 
          size="sm" 
          className="h-8 px-2 text-xs gap-1 bg-white"
        >
          <Unlock className="h-3.5 w-3.5" /> 
          –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[500px] p-0">
        <div className="p-4 bg-white rounded-md">
          <h3 className="text-sm font-bold text-gray-700 mb-2">–°—Ç–∞—Ç—É—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h3>
          
          <Tabs defaultValue="unlocks">
            <TabsList className="w-full mb-2">
              <TabsTrigger value="unlocks">–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</TabsTrigger>
              <TabsTrigger value="practice">–û—Ç–ª–∞–¥–∫–∞ "–ü—Ä–∞–∫—Ç–∏–∫–∞"</TabsTrigger>
              <TabsTrigger value="buildings">–í—Å–µ –∑–¥–∞–Ω–∏—è</TabsTrigger>
            </TabsList>
            
            <TabsContent value="unlocks">
              <div className="grid grid-cols-2 gap-2 mb-2 text-xs">
                <div>
                  <h4 className="font-semibold text-green-600">–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ({unlockedItems.length}):</h4>
                  <ul className="mt-1 space-y-1 text-green-600">
                    {unlockedItems.slice(0, 6).map((item, idx) => (
                      <li key={idx}>‚úÖ {item}</li>
                    ))}
                    {unlockedItems.length > 6 && (
                      <li>... –∏ –µ—â–µ {unlockedItems.length - 6}</li>
                    )}
                  </ul>
                </div>
                <div>
                  <h4 className="font-semibold text-gray-500">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ({lockedItems.length}):</h4>
                  <ul className="mt-1 space-y-1 text-gray-500">
                    {lockedItems.slice(0, 6).map((item, idx) => (
                      <li key={idx}>‚ùå {item}</li>
                    ))}
                    {lockedItems.length > 6 && (
                      <li>... –∏ –µ—â–µ {lockedItems.length - 6}</li>
                    )}
                  </ul>
                </div>
              </div>
              
              <div className="mt-2 p-2 bg-gray-50 rounded border text-xs text-gray-600 max-h-60 overflow-y-auto whitespace-pre-line">
                {loading ? (
                  <div className="text-center py-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
                ) : (
                  statusSteps.map((step, index) => (
                    <div key={index} className={
                      step.includes('‚úÖ') ? 'text-green-600' : 
                      step.includes('‚ùå') ? 'text-red-500' : 
                      step.startsWith('‚Ä¢') ? 'pl-2' :
                      step.startsWith('üìä') || step.startsWith('üîì') || step.startsWith('üèóÔ∏è') || step.startsWith('üìö') ? 'font-semibold mt-2' : ''
                    }>
                      {step}
                    </div>
                  ))
                )}
              </div>
            </TabsContent>
            
            <TabsContent value="practice">
              {practiceStatus ? (
                <div className="p-2 bg-gray-50 rounded border text-xs">
                  <h4 className="font-semibold mb-2">–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∑–¥–∞–Ω–∏—è "–ü—Ä–∞–∫—Ç–∏–∫–∞"</h4>
                  <div className="grid grid-cols-2 gap-x-2 gap-y-1">
                    <div className={practiceStatus.exists ? "text-green-600" : "text-red-500"}>
                      –°—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ state.buildings: {practiceStatus.exists ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç"}
                    </div>
                    <div className={practiceStatus.unlocked ? "text-green-600" : "text-red-500"}>
                      –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤ –∑–¥–∞–Ω–∏–∏: {practiceStatus.unlocked ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç"}
                    </div>
                    <div>
                      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {practiceStatus.count}
                    </div>
                    <div className={practiceStatus.stateInUnlocks ? "text-green-600" : "text-red-500"}>
                      –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤ state.unlocks: {practiceStatus.stateInUnlocks ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç"}
                    </div>
                    <div className={practiceStatus.conditionalCheck ? "text-green-600" : "text-red-500"}>
                      –£—Å–ª–æ–≤–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {practiceStatus.conditionalCheck ? "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" : "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"}
                    </div>
                    <div className={practiceStatus.displayInBuildingsContainer ? "text-green-600" : "text-red-500"}>
                      –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ BuildingsContainer: {practiceStatus.displayInBuildingsContainer ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç"}
                    </div>
                    <div className={practiceStatus.displayInEquipmentTab ? "text-green-600" : "text-red-500"}>
                      –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ EquipmentTab: {practiceStatus.displayInEquipmentTab ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç"}
                    </div>
                    <div className={practiceStatus.inBuildingsList ? "text-green-600" : "text-red-500"}>
                      –í —Å–ø–∏—Å–∫–µ –∑–¥–∞–Ω–∏–π: {practiceStatus.inBuildingsList ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç"}
                    </div>
                  </div>
                  
                  <div className="mt-3 p-2 bg-yellow-50 border border-yellow-200 rounded">
                    <h5 className="font-semibold text-yellow-700">–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã</h5>
                    {!practiceStatus.exists && (
                      <p>–ó–¥–∞–Ω–∏–µ "–ü—Ä–∞–∫—Ç–∏–∫–∞" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ state.buildings. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –Ω–µ –±—ã–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.</p>
                    )}
                    {practiceStatus.exists && !practiceStatus.unlocked && (
                      <p>–ó–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Ñ–ª–∞–≥ unlocked = false. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.</p>
                    )}
                    {practiceStatus.unlocked && !practiceStatus.displayInBuildingsContainer && (
                      <p>–ó–¥–∞–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∑–¥–∞–Ω–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ.</p>
                    )}
                  </div>
                </div>
              ) : (
                <div className="text-center py-4">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å".</div>
              )}
            </TabsContent>
            
            <TabsContent value="buildings">
              {buildingsStatus ? (
                <div className="p-2 bg-gray-50 rounded border text-xs overflow-auto max-h-60">
                  <h4 className="font-semibold mb-2">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–¥–∞–Ω–∏–π</h4>
                  <div className="grid grid-cols-2 gap-1 mb-2">
                    <div>–í—Å–µ–≥–æ –∑–¥–∞–Ω–∏–π: {buildingsStatus.buildingsCount}</div>
                    <div>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {buildingsStatus.unlockedBuildingsCount}</div>
                    <div className={buildingsStatus.equipmentTabUnlocked ? "text-green-600" : "text-red-500"}>
                      –í–∫–ª–∞–¥–∫–∞ Equipment: {buildingsStatus.equipmentTabUnlocked ? "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞" : "‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"}
                    </div>
                  </div>
                  
                  <h4 className="font-semibold mt-2 mb-1">–í—Å–µ –∑–¥–∞–Ω–∏—è –≤ –∏–≥—Ä–µ:</h4>
                  <table className="w-full border-collapse text-xs">
                    <thead>
                      <tr className="bg-gray-100">
                        <th className="border px-1 py-1 text-left">ID</th>
                        <th className="border px-1 py-1 text-center">–°—É—â–µ—Å—Ç–≤—É–µ—Ç</th>
                        <th className="border px-1 py-1 text-center">–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</th>
                        <th className="border px-1 py-1 text-center">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                      </tr>
                    </thead>
                    <tbody>
                      {allBuildings.map((building, index) => (
                        <tr key={index} className={building.id === 'practice' ? 'bg-yellow-50' : ''}>
                          <td className="border px-1 py-1">{building.id}</td>
                          <td className={`border px-1 py-1 text-center ${building.exists ? 'text-green-600' : 'text-red-500'}`}>
                            {building.exists ? '‚úÖ' : '‚ùå'}
                          </td>
                          <td className={`border px-1 py-1 text-center ${building.unlocked ? 'text-green-600' : 'text-red-500'}`}>
                            {building.unlocked ? '‚úÖ' : '‚ùå'}
                          </td>
                          <td className="border px-1 py-1 text-center">{building.count}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              ) : (
                <div className="text-center py-4">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å".</div>
              )}
            </TabsContent>
          </Tabs>
          
          <div className="mt-3 flex justify-end">
            <Button 
              variant="secondary" 
              size="sm" 
              className="text-xs" 
              onClick={updateStatus}
            >
              –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            </Button>
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
};

export default UnlockStatusPopup;
