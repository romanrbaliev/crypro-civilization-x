
import React, { useState, useEffect } from 'react';
import { Unlock } from 'lucide-react';
import { useGame } from '@/context/hooks/useGame';
import { debugUnlockStatus } from '@/utils/debugCalculator';
import { Button } from '@/components/ui/button';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';

const UnlockStatusPopup = () => {
  const { state, forceUpdate } = useGame();
  const [statusSteps, setStatusSteps] = useState<string[]>([]);
  const [unlockedItems, setUnlockedItems] = useState<string[]>([]);
  const [lockedItems, setLockedItems] = useState<string[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  
  const updateStatus = async () => {
    try {
      setLoading(true);
      
      // –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
      forceUpdate();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–∞–Ω–∏—è "–ü—Ä–∞–∫—Ç–∏–∫–∞" –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º debugUnlockStatus
      const practiceBuilding = state.buildings.practice;
      console.log("UnlockStatusPopup: –°—Ç–∞—Ç—É—Å –∑–¥–∞–Ω–∏—è –ü—Ä–∞–∫—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π:", 
        practiceBuilding ? 
        `—Å—É—â–µ—Å—Ç–≤—É–µ—Ç, unlocked=${practiceBuilding.unlocked}, count=${practiceBuilding.count}` : 
        "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ state.buildings");
      
      // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π
      console.log("UnlockStatusPopup: –í—Å–µ –∑–¥–∞–Ω–∏—è:", Object.keys(state.buildings));
      console.log("UnlockStatusPopup: –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è:", 
        Object.values(state.buildings)
          .filter(b => b.unlocked)
          .map(b => `${b.id} (unlocked=${b.unlocked}, count=${b.count})`));
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ–ª–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è
      setTimeout(() => {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
          const result = debugUnlockStatus(state);
          setStatusSteps(result.steps || []); // –®–∞–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π
          setUnlockedItems(result.unlocked || []); // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
          setLockedItems(result.locked || []); // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–∞–Ω–∏—è "–ü—Ä–∞–∫—Ç–∏–∫–∞" –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ debugUnlockStatus
          const practiceBuilding = state.buildings.practice;
          console.log("UnlockStatusPopup: –°—Ç–∞—Ç—É—Å –∑–¥–∞–Ω–∏—è –ü—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:", 
            practiceBuilding ? 
            `—Å—É—â–µ—Å—Ç–≤—É–µ—Ç, unlocked=${practiceBuilding.unlocked}, count=${practiceBuilding.count}` : 
            "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ state.buildings");
          
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫:', error);
          setStatusSteps(['–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: ' + error]);
        } finally {
          setLoading(false);
        }
      }, 100);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      setLoading(false);
    }
  };
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ popover
  const handleOpenChange = (open: boolean) => {
    if (open) {
      updateStatus();
    }
  };
  
  return (
    <Popover onOpenChange={handleOpenChange}>
      <PopoverTrigger asChild>
        <Button 
          variant="outline" 
          size="sm" 
          className="h-8 px-2 text-xs gap-1 bg-white"
        >
          <Unlock className="h-3.5 w-3.5" /> 
          –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-96 p-0">
        <div className="p-4 bg-white rounded-md">
          <h3 className="text-sm font-bold text-gray-700 mb-2">–°—Ç–∞—Ç—É—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h3>
          
          <div className="grid grid-cols-2 gap-2 mb-2 text-xs">
            <div>
              <h4 className="font-semibold text-green-600">–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ({unlockedItems.length}):</h4>
              <ul className="mt-1 space-y-1 text-green-600">
                {unlockedItems.slice(0, 6).map((item, idx) => (
                  <li key={idx}>‚úÖ {item}</li>
                ))}
                {unlockedItems.length > 6 && (
                  <li>... –∏ –µ—â–µ {unlockedItems.length - 6}</li>
                )}
              </ul>
            </div>
            <div>
              <h4 className="font-semibold text-gray-500">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ({lockedItems.length}):</h4>
              <ul className="mt-1 space-y-1 text-gray-500">
                {lockedItems.slice(0, 6).map((item, idx) => (
                  <li key={idx}>‚ùå {item}</li>
                ))}
                {lockedItems.length > 6 && (
                  <li>... –∏ –µ—â–µ {lockedItems.length - 6}</li>
                )}
              </ul>
            </div>
          </div>
          
          <div className="mt-2 p-2 bg-gray-50 rounded border text-xs text-gray-600 max-h-80 overflow-y-auto whitespace-pre-line">
            {loading ? (
              <div className="text-center py-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
            ) : (
              statusSteps.map((step, index) => (
                <div key={index} className={
                  step.includes('‚úÖ') ? 'text-green-600' : 
                  step.includes('‚ùå') ? 'text-red-500' : 
                  step.startsWith('‚Ä¢') ? 'pl-2' :
                  step.startsWith('üìä') || step.startsWith('üîì') || step.startsWith('üèóÔ∏è') || step.startsWith('üìö') ? 'font-semibold mt-2' : ''
                }>
                  {step}
                </div>
              ))
            )}
          </div>
          
          <div className="mt-3 flex justify-end">
            <Button 
              variant="secondary" 
              size="sm" 
              className="text-xs" 
              onClick={updateStatus}
            >
              –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            </Button>
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
};

export default UnlockStatusPopup;
