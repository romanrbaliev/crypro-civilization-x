
import { supabase } from '@/integrations/supabase/client';
import { GameState } from '@/context/types';
import { Json } from '@/integrations/supabase/types';
import { getUserIdentifier } from '../userIdentification';
import { checkSupabaseConnection } from '../connectionUtils';
import { safeDispatchGameEvent } from '@/context/utils/eventBusUtils';
import { SAVES_TABLE } from '../apiTypes';

// –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã –≤ Supabase
export const saveGameToServer = async (gameState: GameState): Promise<boolean> => {
  try {
    const userId = await getUserIdentifier();
    console.log(`üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase, –Ω–æ –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    const isConnected = await checkSupabaseConnection();
    
    console.log('üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase...');
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
    const gameStateCopy = JSON.parse(JSON.stringify(gameState));
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ñ–ª–∞–≥ gameStarted —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    gameStateCopy.gameStarted = true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ USDT –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    if (gameStateCopy.resources && gameStateCopy.resources.usdt) {
      if (!gameStateCopy.counters.applyKnowledge || gameStateCopy.counters.applyKnowledge.value < 2) {
        gameStateCopy.resources.usdt.unlocked = false;
        gameStateCopy.unlocks.usdt = false;
      } else {
        gameStateCopy.resources.usdt.unlocked = true;
        gameStateCopy.unlocks.usdt = true;
      }
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–¥–∞–Ω–∏–π
    
    // –ö—Ä–∏–ø—Ç–æ–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ "–û—Å–Ω–æ–≤—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"
    const hasCryptoBasics = 
      (gameStateCopy.upgrades.cryptoCurrencyBasics?.purchased === true) || 
      (gameStateCopy.upgrades.cryptoBasics?.purchased === true);
      
    if (hasCryptoBasics) {
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
      if (!gameStateCopy.buildings.cryptoLibrary) {
        // –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        gameStateCopy.buildings.cryptoLibrary = {
          id: "cryptoLibrary",
          name: "–ö—Ä–∏–ø—Ç–æ–±–∏–±–ª–∏–æ—Ç–µ–∫–∞",
          description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π –Ω–∞ 50% –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–Ω–∏–π –Ω–∞ 100",
          baseCost: {
            usdt: 200,
            knowledge: 200
          },
          costMultiplier: 1.15,
          count: 0,
          unlocked: true
        };
      } else {
        gameStateCopy.buildings.cryptoLibrary.unlocked = true;
      }
      gameStateCopy.unlocks.cryptoLibrary = true;
      console.log("saveGame: –ö—Ä–∏–ø—Ç–æ–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞");
    }
    
    // –°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ 2+ —É—Ä–æ–≤–Ω–µ–π –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    if (gameStateCopy.buildings.homeComputer?.count >= 2) {
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
      if (!gameStateCopy.buildings.coolingSystem) {
        // –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        gameStateCopy.buildings.coolingSystem = {
          id: "coolingSystem",
          name: "–°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è",
          description: "–£–º–µ–Ω—å—à–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ –≤—Å–µ–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –Ω–∞ 20%",
          baseCost: {
            usdt: 200,
            electricity: 50
          },
          costMultiplier: 1.15,
          count: 0,
          unlocked: true
        };
      } else {
        gameStateCopy.buildings.coolingSystem.unlocked = true;
      }
      gameStateCopy.unlocks.coolingSystem = true;
      console.log("saveGame: –°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞");
    }
    
    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ 5+ —É—Ä–æ–≤–Ω–µ–π –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞
    if (gameStateCopy.buildings.cryptoWallet?.count >= 5) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
      if (gameStateCopy.buildings.enhancedWallet) {
        gameStateCopy.buildings.enhancedWallet.unlocked = true;
        gameStateCopy.unlocks.enhancedWallet = true;
        console.log("saveGame: –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ (enhancedWallet) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
      }
      
      if (gameStateCopy.buildings.improvedWallet) {
        gameStateCopy.buildings.improvedWallet.unlocked = true;
        gameStateCopy.unlocks.improvedWallet = true;
        console.log("saveGame: –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ (improvedWallet) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
      }
      
      // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º enhancedWallet
      if (!gameStateCopy.buildings.enhancedWallet && !gameStateCopy.buildings.improvedWallet) {
        gameStateCopy.buildings.enhancedWallet = {
          id: "enhancedWallet",
          name: "–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫",
          description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ USDT –Ω–∞ 150, Bitcoin –Ω–∞ 1, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ BTC –Ω–∞ 8%",
          baseCost: {
            usdt: 300,
            knowledge: 250
          },
          costMultiplier: 1.15,
          count: 0,
          unlocked: true
        };
        gameStateCopy.unlocks.enhancedWallet = true;
        console.log("saveGame: –°–æ–∑–¥–∞–Ω –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ (enhancedWallet)");
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    gameStateCopy.unlocks.research = gameStateCopy.buildings.generator?.count > 0;
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ Bitcoin –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
    if (gameStateCopy.resources && gameStateCopy.resources.bitcoin && 
        gameStateCopy.resources.bitcoin.max < 0.01) {
      gameStateCopy.resources.bitcoin.max = 0.01;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª–µ activated –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    if (gameStateCopy.referrals && gameStateCopy.referrals.length > 0) {
      gameStateCopy.referrals = gameStateCopy.referrals.map((referral: any) => {
        if (typeof referral.activated === 'string') {
          return {
            ...referral,
            activated: referral.activated === 'true'
          };
        }
        return referral;
      });
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º GameState –≤ Json
    let gameDataJson: Json;
    try {
      const jsonString = JSON.stringify(gameStateCopy);
      gameDataJson = JSON.parse(jsonString);
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ JSON:', parseError);
      return false;
    }
    
    // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const saveData = {
      user_id: userId,
      game_data: gameDataJson,
      updated_at: new Date().toISOString()
    };
    
    // –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
    const { error } = await supabase
      .from(SAVES_TABLE)
      .upsert(saveData, { onConflict: 'user_id' });
    
    if (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Supabase:', error);
      
      // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (error.code === 'PGRST116') {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        const { createSavesTableIfNotExists } = await import('../tableManagement');
        const tableCreated = await createSavesTableIfNotExists();
        
        if (tableCreated) {
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
          const { error: retryError } = await supabase
            .from(SAVES_TABLE)
            .upsert(saveData, { onConflict: 'user_id' });
            
          if (retryError) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Supabase:', retryError);
            return false;
          }
          
          console.log('‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã');
          return true;
        }
      }
      
      // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
      return false;
    }
    
    console.log('‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Supabase');
    return true;
    
  } catch (error) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–≥—Ä—ã, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É:', error);
    return false;
  }
};
