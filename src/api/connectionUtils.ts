
import { supabase } from '@/integrations/supabase/client';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
export const checkSupabaseConnection = async (): Promise<boolean> => {
  try {
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase...');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const timeoutPromise = new Promise<boolean>((_, reject) => {
      setTimeout(() => {
        reject(new Error('Timeout waiting for Supabase connection'));
      }, 7000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 7 —Å–µ–∫—É–Ω–¥
    });
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    const connectionPromise = new Promise<boolean>(async (resolve) => {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ referral_data
        const { data, error } = await supabase
          .from('referral_data')
          .select('user_id')
          .limit(1);
          
        if (error) {
          if (error.message && 
              (error.message.includes('cloudflare') || 
               error.message.includes('Cloudflare') ||
               error.message.includes('timeout') ||
               error.message.includes('network error'))) {
            console.error('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ Cloudflare –∏–ª–∏ —Å–µ—Ç–∏:', error.message);
            throw new Error(`cloudflare: ${error.message}`);
          }
          
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase:', error);
          resolve(false);
          return;
        }
        
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        resolve(true);
      } catch (err) {
        if (err instanceof Error && 
            (err.message.includes('cloudflare') || 
             err.message.includes('Cloudflare') ||
             err.message.includes('timeout') ||
             err.message.includes('network error'))) {
          console.error('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ Cloudflare –∏–ª–∏ —Å–µ—Ç–∏:', err.message);
          throw err; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        }
        
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase:', err);
        resolve(false);
      }
    });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.race –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–∞—É—Ç–∞
    return await Promise.race([connectionPromise, timeoutPromise])
      .catch(err => {
        if (err instanceof Error && 
            (err.message.includes('cloudflare') || 
             err.message.includes('Cloudflare') ||
             err.message.includes('timeout'))) {
          console.error('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ Cloudflare –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞:', err.message);
          throw err; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É Cloudflare –¥–∞–ª—å—à–µ
        }
        
        console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase:', err);
        return false;
      });
  } catch (error) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å Cloudflare
    if (error instanceof Error && 
        (error.message.includes('cloudflare') || 
         error.message.includes('Cloudflare') ||
         error.message.includes('timeout') ||
         error.message.includes('network error'))) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Cloudflare:', error.message);
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É Cloudflare –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    }
    
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase:', error);
    return false;
  }
};
