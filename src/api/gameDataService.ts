
// API —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å Supabase

import { GameState } from '@/context/types';
import { isTelegramWebAppAvailable } from '@/utils/helpers';
import { toast } from "@/hooks/use-toast";
import { supabase } from '@/integrations/supabase/client';
import { Json } from '@/integrations/supabase/types';
import { safeDispatchGameEvent } from '@/context/utils/eventBusUtils';

// –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let supabaseChecked = false;
let supabaseAvailable = false;
let supabaseNotificationShown = false;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const SAVES_TABLE = 'game_saves';
const LOCAL_BACKUP_KEY = 'cryptoCivilizationLocalBackup';
const LAST_CHECK_INTERVAL = 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

// –ö—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
let lastCheckTime = 0;
let cachedConnectionResult = false;

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º Telegram
const getUserIdentifier = async (): Promise<string> => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID –≤ –ø–∞–º—è—Ç–∏
  const cachedId = window.__game_user_id;
  if (cachedId) {
    return cachedId;
  }
  
  // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å Telegram ID —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
  if (isTelegramWebAppAvailable()) {
    try {
      const tg = window.Telegram.WebApp;
      if (tg.initDataUnsafe?.user?.id) {
        const telegramUserId = tg.initDataUnsafe.user.id;
        const id = `tg_${telegramUserId}`;
        window.__game_user_id = id;
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram: ${id}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ localStorage –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞
        try {
          localStorage.setItem('telegram_user_id', telegramUserId.toString());
        } catch (e) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å Telegram ID –≤ localStorage:', e);
        }
        
        return id;
      } else {
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ localStorage
        const storedTelegramId = localStorage.getItem('telegram_user_id');
        if (storedTelegramId) {
          const id = `tg_${storedTelegramId}`;
          window.__game_user_id = id;
          console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –∏–∑ localStorage: ${id}`);
          return id;
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Telegram ID:', error);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ Supabase
  if (supabase) {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (user?.id) {
        const id = `sb_${user.id}`;
        window.__game_user_id = id;
        return id;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Supabase:', error);
    }
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ localStorage
  let localId = localStorage.getItem('game_user_id');
  if (!localId) {
    localId = `local_${Math.random().toString(36).substring(2, 15)}`;
    try {
      localStorage.setItem('game_user_id', localId);
    } catch (e) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π ID –≤ localStorage:', e);
    }
  }
  
  window.__game_user_id = localId;
  return localId;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
export const checkSupabaseConnection = async (): Promise<boolean> => {
  // –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  if (supabaseChecked) {
    return supabaseAvailable;
  }
  
  // –î–µ–±–∞—É–Ω—Å: –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const now = Date.now();
  if (now - lastCheckTime < LAST_CHECK_INTERVAL) {
    return cachedConnectionResult;
  }
  
  try {
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase...');
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã
    const { error } = await supabase
      .from(SAVES_TABLE)
      .select('count')
      .limit(1);
    
    if (error && error.code === 'PGRST116') {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å...');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ RPC
      const { error: createError } = await supabase.rpc('create_saves_table');
      
      if (createError) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É:', createError);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
        const { error: retryError } = await supabase
          .from(SAVES_TABLE)
          .select('count')
          .limit(1);
        
        const isConnected = !retryError || (retryError.code !== 'PGRST116');
        supabaseChecked = true;
        supabaseAvailable = isConnected;
        lastCheckTime = now;
        cachedConnectionResult = isConnected;
        
        return isConnected;
      }
      
      // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
      supabaseChecked = true;
      supabaseAvailable = true;
      lastCheckTime = now;
      cachedConnectionResult = true;
      
      return true;
    }
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã
    const isConnected = !error || (error.code !== 'PGRST116');
    supabaseChecked = true;
    supabaseAvailable = isConnected;
    lastCheckTime = now;
    cachedConnectionResult = isConnected;
    
    if (isConnected) {
      console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } else {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase:', error);
    }
    
    return isConnected;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error);
    
    supabaseChecked = true;
    supabaseAvailable = false;
    lastCheckTime = now;
    cachedConnectionResult = false;
    
    return false;
  }
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã –≤ Supabase –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
export const saveGameToServer = async (gameState: GameState): Promise<boolean> => {
  try {
    const userId = await getUserIdentifier();
    console.log(`üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    let saveSuccess = false;
    
    // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    try {
      localStorage.setItem(LOCAL_BACKUP_KEY, JSON.stringify({
        gameData: gameState,
        timestamp: Date.now(),
        userId
      }));
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∏–≥—Ä—ã');
      saveSuccess = true;
    } catch (backupError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', backupError);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    const isConnected = await checkSupabaseConnection();
      
    if (!isConnected) {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (!supabaseNotificationShown) {
        supabaseNotificationShown = true;
        toast({
          title: "–õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ",
          description: "–û–±–ª–∞—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ.",
          variant: "warning",
        });
        safeDispatchGameEvent(
          "–û–±–ª–∞—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ.", 
          "warning"
        );
      }
      
      return saveSuccess; // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    }
    
    console.log('üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase...');
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º GameState –≤ Json —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    // –°—Ç—Ä–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
    let gameDataJson: Json;
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON.stringify –∏ JSON.parse –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø Json
      const jsonString = JSON.stringify(gameState);
      gameDataJson = JSON.parse(jsonString);
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ JSON:', parseError);
      return saveSuccess; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
    
    // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const saveData = {
      user_id: userId,
      game_data: gameDataJson,
      updated_at: new Date().toISOString()
    };
    
    console.log('üëâ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:', saveData);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å —Å —è–≤–Ω—ã–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
    const { error: upsertError } = await supabase
      .from(SAVES_TABLE)
      .upsert(saveData, { onConflict: 'user_id' });
    
    if (upsertError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Supabase:', upsertError);
      
      if (!supabaseNotificationShown) {
        supabaseNotificationShown = true;
        toast({
          title: "–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ–±–ª–∞–∫–µ. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ.",
          variant: "warning",
        });
        safeDispatchGameEvent(
          "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ–±–ª–∞–∫–µ. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ.",
          "warning"
        );
      }
      
      return saveSuccess;
    }
    
    console.log('‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Supabase');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ Supabase —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω
    if (supabaseNotificationShown) {
      supabaseNotificationShown = false;
      safeDispatchGameEvent(
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–±–ª–∞–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.",
        "success"
      );
    }
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
    
    if (!supabaseNotificationShown) {
      supabaseNotificationShown = true;
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
        variant: "destructive",
      });
      safeDispatchGameEvent(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
        "error"
      );
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è
    return localStorage.getItem(LOCAL_BACKUP_KEY) !== null;
  }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã –∏–∑ Supabase –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
export const loadGameFromServer = async (): Promise<GameState | null> => {
  try {
    const userId = await getUserIdentifier();
    console.log(`üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    const isConnected = await checkSupabaseConnection();
      
    if (isConnected) {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Supabase...');
      
      try {
        const { data, error } = await supabase
          .from(SAVES_TABLE)
          .select('game_data, updated_at')
          .eq('user_id', userId)
          .maybeSingle();
        
        if (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ Supabase:', error);
          
          if (error.code === 'PGRST116') {
            console.warn('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Supabase');
            safeDispatchGameEvent(
              "–¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–±–ª–∞–∫–µ.",
              "warning"
            );
          }
        } else if (data && data.game_data) {
          console.log('‚úÖ –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ Supabase, –¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', data.updated_at);
          console.log('üëâ –î–∞–Ω–Ω—ã–µ –∏–∑ Supabase:', JSON.stringify(data.game_data).substring(0, 100) + '...');
          
          try {
            // –°—Ç—Ä–æ–≥–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            const gameState = data.game_data as any;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            if (validateGameState(gameState)) {
              console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase –ø—Ä–æ–π–¥–µ–Ω–∞');
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞
              try {
                localStorage.setItem(LOCAL_BACKUP_KEY, JSON.stringify({
                  gameData: gameState,
                  timestamp: Date.now(),
                  userId
                }));
                console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ Supabase');
                
                safeDispatchGameEvent(
                  "–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.",
                  "success"
                );
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è lastUpdate –∏ lastSaved, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                if (!gameState.lastUpdate) {
                  gameState.lastUpdate = Date.now();
                }
                if (!gameState.lastSaved) {
                  gameState.lastSaved = Date.now();
                }
                
                return gameState;
              } catch (localError) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é:', localError);
              }
              
              return gameState;
            } else {
              console.error('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
              safeDispatchGameEvent(
                "–î–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã. –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏.",
                "warning"
              );
            }
          } catch (parseError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase:', parseError);
          }
        } else {
          console.log('‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
      } catch (supabaseError) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Supabase:', supabaseError);
      }
    }
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Supabase, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    try {
      console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º LOCAL_BACKUP_KEY (–æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
      const backupData = localStorage.getItem(LOCAL_BACKUP_KEY);
      if (backupData) {
        try {
          const localBackup = JSON.parse(backupData);
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –æ—Ç:', new Date(localBackup.timestamp).toLocaleString());
          
          if (localBackup.gameData) {
            const gameState = localBackup.gameData;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            if (validateGameState(gameState)) {
              console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ –ø—Ä–æ–π–¥–µ–Ω–∞');
              safeDispatchGameEvent(
                "–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏.",
                "info"
              );
              
              // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è lastUpdate –∏ lastSaved, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
              if (!gameState.lastUpdate) {
                gameState.lastUpdate = Date.now();
              }
              if (!gameState.lastSaved) {
                gameState.lastSaved = Date.now();
              }
              
              return gameState;
            } else {
              console.error('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
            }
          }
        } catch (parseError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏:', parseError);
        }
      }
      
      // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º GAME_STORAGE_KEY (–±–∞–∑–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
      const mainData = localStorage.getItem('cryptoCivilizationSave');
      if (mainData) {
        try {
          const mainSave = JSON.parse(mainData);
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
          if (validateGameState(mainSave)) {
            console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞');
            safeDispatchGameEvent(
              "–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.",
              "info"
            );
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è lastUpdate –∏ lastSaved, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if (!mainSave.lastUpdate) {
              mainSave.lastUpdate = Date.now();
            }
            if (!mainSave.lastSaved) {
              mainSave.lastSaved = Date.now();
            }
            
            return mainSave;
          } else {
            console.error('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
          }
        } catch (parseError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', parseError);
        }
      }
    } catch (backupError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏:', backupError);
    }
    
    console.log('‚ùå –ù–∏ –æ–¥–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã');
    safeDispatchGameEvent(
      "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.",
      "info"
    );
    return null;
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä—ã:', error);
    safeDispatchGameEvent(
      "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä—ã. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.",
      "error"
    );
    return null;
  }
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
function validateGameState(state: any): boolean {
  if (!state) return false;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
  const requiredFields = ['resources', 'buildings', 'upgrades', 'unlocks'];
  for (const field of requiredFields) {
    if (!state[field] || typeof state[field] !== 'object') {
      console.error(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª–µ ${field}`);
      return false;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
  if (!state.resources.knowledge || !state.resources.usdt) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–∞–∑–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã knowledge –∏–ª–∏ usdt');
    return false;
  }
  
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
export const clearAllSavedData = async (): Promise<void> => {
  try {
    const userId = await getUserIdentifier();
    
    // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    localStorage.removeItem(LOCAL_BACKUP_KEY);
    localStorage.removeItem('cryptoCivilizationSave');
    console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    const isConnected = await checkSupabaseConnection();
      
    if (isConnected) {
      console.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑ Supabase...');
      
      const { error } = await supabase
        .from(SAVES_TABLE)
        .delete()
        .eq('user_id', userId);
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑ Supabase:', error);
        
        toast({
          title: "–ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞",
          description: "–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.",
          variant: "warning",
        });
        safeDispatchGameEvent(
          "–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.",
          "warning"
        );
      } else {
        console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase —É–¥–∞–ª–µ–Ω–æ');
        
        toast({
          title: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã",
          description: "–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.",
          variant: "default",
        });
        safeDispatchGameEvent(
          "–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.",
          "success"
        );
      }
    } else {
      toast({
        title: "–õ–æ–∫–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞",
        description: "–õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã. –û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.",
        variant: "warning",
      });
      safeDispatchGameEvent(
        "–õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã. –û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.",
        "warning"
      );
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π:', error);
    
    toast({
      title: "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏",
      description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π.",
      variant: "destructive",
    });
    safeDispatchGameEvent(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π.",
      "error"
    );
  }
};

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è window
declare global {
  interface Window {
    __game_user_id?: string;
  }
}
