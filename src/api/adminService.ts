
// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏

import { supabase } from '@/integrations/supabase/client';
import { getUserIdentifier } from './userIdentification';
import { checkSupabaseConnection } from './connectionUtils';
import { safeDispatchGameEvent } from '@/context/utils/eventBusUtils';
import { toast } from "@/hooks/use-toast";
import { SAVES_TABLE, REFERRAL_TABLE, REFERRAL_HELPERS_TABLE } from './apiTypes';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
export const clearAllSavedData = async (): Promise<void> => {
  try {
    const userId = await getUserIdentifier();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    const isConnected = await checkSupabaseConnection();
      
    if (isConnected) {
      console.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑ Supabase...');
      
      const { error } = await supabase
        .from(SAVES_TABLE)
        .delete()
        .eq('user_id', userId);
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑ Supabase:', error);
        
        toast({
          title: "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.",
          variant: "destructive",
        });
      } else {
        console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase —É–¥–∞–ª–µ–Ω–æ');
        
        // –û—á–∏—â–∞–µ–º —Ç–∞–∫–∂–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        localStorage.removeItem('crypto_civ_user_id');
        
        toast({
          title: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã",
          description: "–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.",
          variant: "success",
        });
      }
    } else {
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π.",
        variant: "destructive",
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π:', error);
    
    toast({
      title: "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏",
      description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π.",
      variant: "destructive",
    });
  }
};

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
export const clearAllSavedDataForAllUsers = async (): Promise<void> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    const isConnected = await checkSupabaseConnection();
      
    if (isConnected) {
      console.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –∏–∑ Supabase...');
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
      const { error: savesError } = await supabase
        .from(SAVES_TABLE)
        .delete()
        .neq('user_id', 'DUMMY_ID_THAT_DOESNT_EXIST');
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
      const { error: helpersError } = await supabase
        .from(REFERRAL_HELPERS_TABLE)
        .delete()
        .neq('helper_id', 'DUMMY_ID_THAT_DOESNT_EXIST');
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const { error: referralsError } = await supabase
        .from(REFERRAL_TABLE)
        .delete()
        .neq('user_id', 'DUMMY_ID_THAT_DOESNT_EXIST');
      
      if (savesError || helpersError || referralsError) {
        console.error('‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', { 
          savesError, helpersError, referralsError 
        });
        
        toast({
          title: "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.",
          variant: "destructive",
        });
      } else {
        console.log('‚úÖ –í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase —É–¥–∞–ª–µ–Ω—ã');
        
        // –û—á–∏—â–∞–µ–º —Ç–∞–∫–∂–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        localStorage.removeItem('crypto_civ_user_id');
        
        toast({
          title: "–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã",
          description: "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.",
          variant: "success",
        });
      }
    } else {
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π.",
        variant: "destructive",
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π:', error);
    
    toast({
      title: "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏",
      description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π.",
      variant: "destructive",
    });
  }
};
