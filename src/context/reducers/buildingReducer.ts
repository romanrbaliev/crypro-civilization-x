
import { GameState, GameAction } from '../types';
import { canAffordCost, deductResources } from '@/utils/helpers';
import { activateReferral } from '@/api/gameDataService';
import { safeDispatchGameEvent } from '@/context/utils/eventBusUtils';
import { updateResourceMaxValues } from '../utils/resourceUtils';
import { supabase } from '@/integrations/supabase/client';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
const updateReferralActivation = async (userId: string) => {
  try {
    if (!userId) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç userId');
      return;
    }
    
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ referral_data
    const { data, error } = await supabase
      .from('referral_data')
      .update({ is_activated: true })
      .eq('user_id', userId);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', error);
    } else {
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: referralData, error: referralError } = await supabase
        .from('referral_data')
        .select('referred_by')
        .eq('user_id', userId)
        .single();
        
      if (referralError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ:', referralError);
        return;
      }
      
      if (referralData && referralData.referred_by) {
        console.log('–ù–∞–π–¥–µ–Ω –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ:', referralData.referred_by);
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å —á–µ—Ä–µ–∑ API
        const activated = await activateReferral(userId);
        
        if (activated) {
          console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ API');
          safeDispatchGameEvent("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", "success");
        } else {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å —á–µ—Ä–µ–∑ API');
        }
      } else {
        console.log('‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞');
      }
    }
  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', error);
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ gameReducer
export const processPurchaseBuilding = (state: GameState, payload: { buildingId: string }): GameState => {
  const buildingId = payload.buildingId;
  const building = state.buildings[buildingId];

  if (!building?.unlocked) {
    return state;
  }

  const cost = calculateBuildingCost(building);

  if (!canAffordCost(cost, state.resources)) {
    return state;
  }

  const newResources = deductResources(cost, state.resources);
  const newBuildings = { ...state.buildings };
  
  newBuildings[buildingId] = {
    ...building,
    count: building.count + 1,
    cost: {
      ...building.cost,
    },
  };

  // –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π
  
  // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –∫—É–ø–∏–ª –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
  if (buildingId === 'generator' && building.count === 0) {
    console.log('–ò–≥—Ä–æ–∫ –ø–æ—Å—Ç—Ä–æ–∏–ª —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä');
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    const newUnlocks = { ...state.unlocks, research: true };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º "–û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω–∞"
    const newUpgrades = { ...state.upgrades };
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ ID blockchain_basics
    if (newUpgrades.blockchain_basics) {
      console.log('–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ "–û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω–∞" (blockchain_basics)');
      newUpgrades.blockchain_basics = {
        ...newUpgrades.blockchain_basics,
        unlocked: true
      };
    }
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É ID basicBlockchain
    if (newUpgrades.basicBlockchain) {
      console.log('–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ "–û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω–∞" (basicBlockchain)');
      newUpgrades.basicBlockchain = {
        ...newUpgrades.basicBlockchain,
        unlocked: true
      };
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    if (state.referredBy) {
      console.log(`–ò–≥—Ä–æ–∫ –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ –∫–æ–¥—É ${state.referredBy}. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å.`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      safeDispatchGameEvent("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å –≥–æ—Ç–æ–≤–∞ –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –ü–æ—Å–ª–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è \"–û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω–∞\" –≤—ã –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç–µ –±–æ–Ω—É—Å –¥–ª—è –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –≤–∞—Å!", "info");
      
      // –ù–ï –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ referral_data
    if (window.__game_user_id) {
      updateReferralActivation(window.__game_user_id);
    } else {
      console.warn('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    const stateWithNewUpgrades = {
      ...state,
      resources: newResources,
      buildings: newBuildings,
      unlocks: newUnlocks,
      upgrades: newUpgrades,
    };
    
    return updateResourceMaxValues(stateWithNewUpgrades);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∑–¥–∞–Ω–∏–µ–º –∏ –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
  const newState = {
    ...state,
    resources: newResources,
    buildings: newBuildings,
  };
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º —Ä–µ—Å—É—Ä—Å–æ–≤
  return updateResourceMaxValues(newState);
};

export const buildingReducer = (state: GameState, action: GameAction): GameState => {
  if (action.type === "PURCHASE_BUILDING") {
    return processPurchaseBuilding(state, action.payload);
  }
  return state;
};

const calculateBuildingCost = (building: any) => {
  const result: { [key: string]: number } = {};
  
  Object.entries(building.cost).forEach(([resourceId, amount]) => {
    result[resourceId] = Math.floor(Number(amount) * Math.pow(building.costMultiplier, building.count));
  });
  
  return result;
};

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è window
declare global {
  interface Window {
    __game_user_id?: string;
  }
}
