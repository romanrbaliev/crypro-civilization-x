import { GameState, Building } from '../types';
import { toast } from '@/components/ui/use-toast';
import { formatResourceValue } from '@/utils/resourceFormatConfig';
import { safeDispatchGameEvent } from '../utils/eventBusUtils';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–¥–∞–Ω–∏—è
const calculateBuildingCost = (building: Building): { [key: string]: number } => {
  const baseCost = { ...building.cost };
  const multiplier = building.costMultiplier || 1.15;
  const count = building.count || 0;
  
  // –£–º–Ω–æ–∂–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã
  const scaledCost: { [key: string]: number } = {};
  for (const [resourceId, cost] of Object.entries(baseCost)) {
    scaledCost[resourceId] = Math.floor(Number(cost) * Math.pow(multiplier, count));
  }
  
  return scaledCost;
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –∑–¥–∞–Ω–∏—è
export const processPurchaseBuilding = (state: GameState, payload: { buildingId: string }): GameState => {
  const { buildingId } = payload;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–µ –∑–¥–∞–Ω–∏–µ
  if (!state.buildings[buildingId]) {
    console.log(`–ó–¥–∞–Ω–∏–µ —Å ID ${buildingId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    return state;
  }
  
  const building = state.buildings[buildingId];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –∑–¥–∞–Ω–∏–µ
  if (!building.unlocked) {
    console.log(`–ó–¥–∞–Ω–∏–µ ${building.name} –µ—â–µ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ`);
    return state;
  }
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–¥–∞–Ω–∏—è
  const currentCost = calculateBuildingCost(building);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
  for (const [resourceId, cost] of Object.entries(currentCost)) {
    const resource = state.resources[resourceId];
    if (!resource || resource.value < cost) {
      console.log(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–∞ ${resourceId} –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ${building.name}`);
      return state;
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
  const updatedResources = { ...state.resources };
  
  // –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
  for (const [resourceId, cost] of Object.entries(currentCost)) {
    updatedResources[resourceId] = {
      ...updatedResources[resourceId],
      value: updatedResources[resourceId].value - cost
    };
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ
  if (buildingId === 'generator' && building.count === 0) {
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if (!state.resources.electricity || !state.resources.electricity.unlocked) {
      console.log("üîå –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–µ—Ä–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞");
      
      updatedResources.electricity = {
        id: 'electricity',
        name: '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ',
        description: '–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è –¥–ª—è –ø–∏—Ç–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
        type: 'resource',
        icon: 'zap',
        value: 0,
        baseProduction: 0,
        production: 0,
        perSecond: 0,
        max: 100,
        unlocked: true
      };
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      state = {
        ...state,
        unlocks: {
          ...state.unlocks,
          electricity: true
        }
      };
      
      safeDispatchGameEvent("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ä–µ—Å—É—Ä—Å: –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ!", "success");
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–∞–Ω–∏–µ
  const updatedBuildings = {
    ...state.buildings,
    [buildingId]: {
      ...building,
      count: (building.count || 0) + 1
    }
  };
  
  // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
  const costString = Object.entries(currentCost)
    .map(([resourceId, cost]) => `${formatResourceValue(cost, resourceId)} ${state.resources[resourceId]?.name || resourceId}`)
    .join(", ");
    
  console.log(`–ö—É–ø–ª–µ–Ω–æ –∑–¥–∞–Ω–∏–µ ${building.name} –∑–∞ ${costString}`);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  return {
    ...state,
    resources: updatedResources,
    buildings: updatedBuildings
  };
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–∞–∂–∏ –∑–¥–∞–Ω–∏—è
export const processSellBuilding = (state: GameState, payload: { buildingId: string }): GameState => {
  const { buildingId } = payload;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–µ –∑–¥–∞–Ω–∏–µ
  if (!state.buildings[buildingId]) {
    console.log(`–ó–¥–∞–Ω–∏–µ —Å ID ${buildingId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    return state;
  }
  
  const building = state.buildings[buildingId];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å
  if (!building.count || building.count <= 0) {
    console.log(`–ù–µ—á–µ–≥–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å: –∑–¥–∞–Ω–∏–µ ${building.name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
    return state;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ (50% –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏)
  const currentCost = calculateBuildingCost(building);
  const refundMultiplier = 0.5;
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
  const updatedResources = { ...state.resources };
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
  for (const [resourceId, cost] of Object.entries(currentCost)) {
    const refund = Math.floor(Number(cost) * refundMultiplier);
    
    updatedResources[resourceId] = {
      ...updatedResources[resourceId],
      value: updatedResources[resourceId].value + refund
    };
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–∞–Ω–∏–µ
  const updatedBuildings = {
    ...state.buildings,
    [buildingId]: {
      ...building,
      count: building.count - 1
    }
  };
  
  // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂—É
  console.log(`–ü—Ä–æ–¥–∞–Ω–æ –∑–¥–∞–Ω–∏–µ ${building.name}, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: ${refundMultiplier * 100}%`);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  return {
    ...state,
    resources: updatedResources,
    buildings: updatedBuildings
  };
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
export const processChooseSpecialization = (state: GameState, payload: { roleId: string }): GameState => {
  const { roleId } = payload;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
  if (state.specialization) {
    console.log(`–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞: ${state.specialization}`);
    return state;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const availableSpecializations = ['miner', 'trader', 'scientist'];
  if (!availableSpecializations.includes(roleId)) {
    console.log(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${roleId}`);
    return state;
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
  const newState = {
    ...state,
    specialization: roleId
  };
  
  console.log(`–í—ã–±—Ä–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${roleId}`);
  
  return newState;
};
