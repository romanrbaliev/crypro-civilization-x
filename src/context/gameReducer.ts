import { GameState, GameAction } from './types';
import { initialState } from './initialState';
import { hasEnoughResources, meetsRequirements, updateResourceMaxValues } from './utils/resourceUtils';
import { processIncrementResource } from './reducers/resourceReducer';
import { processPurchaseBuilding } from './reducers/buildingReducer';
import { processPurchaseUpgrade } from './reducers/upgradeReducer';
import { processResourceUpdate } from './reducers/resourceUpdateReducer';
import { processApplyKnowledge, processMiningPower } from './reducers/actionsReducer';
import { safeDispatchGameEvent } from './utils/eventBusUtils';

// –ì–ª–∞–≤–Ω—ã–π —Ä–µ–¥—å—é—Å–µ—Ä –∏–≥—Ä—ã
export const gameReducer = (state: GameState = initialState, action: GameAction): GameState => {
  console.log('Received action:', action.type);
  
  switch (action.type) {
    // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Ä–µ—Å—É—Ä—Å–∞
    case "INCREMENT_RESOURCE": {
      return processIncrementResource(state, action.payload);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ç–∏–∫)
    case "UPDATE_RESOURCES": {
      return processResourceUpdate(state);
    }
    
    // –ü–æ–∫—É–ø–∫–∞ –∑–¥–∞–Ω–∏—è
    case "PURCHASE_BUILDING": {
      return processPurchaseBuilding(state, action.payload);
    }
    
    // –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
    case "PURCHASE_UPGRADE": {
      return processPurchaseUpgrade(state, action.payload);
    }
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∏—á–∏
    case "UNLOCK_FEATURE": {
      const { featureId } = action.payload;
      
      return {
        ...state,
        unlocks: {
          ...state.unlocks,
          [featureId]: true
        }
      };
    }
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–∞
    case "UNLOCK_RESOURCE": {
      const { resourceId } = action.payload;
      
      if (!state.resources[resourceId]) {
        return state;
      }
      
      return {
        ...state,
        resources: {
          ...state.resources,
          [resourceId]: {
            ...state.resources[resourceId],
            unlocked: true
          }
        }
      };
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–¥–∞–Ω–∏—è
    case "SET_BUILDING_UNLOCKED": {
      const { buildingId, unlocked } = action.payload;
      
      if (!state.buildings[buildingId]) {
        console.warn(`–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–¥–∞–Ω–∏—è: ${buildingId}`);
        return state;
      }
      
      console.log(`–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –∑–¥–∞–Ω–∏—è ${buildingId}: ${unlocked}`);
      
      return {
        ...state,
        buildings: {
          ...state.buildings,
          [buildingId]: {
            ...state.buildings[buildingId],
            unlocked
          }
        }
      };
    }
    
    // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞
    case "INCREMENT_COUNTER": {
      const { counterId } = action.payload;
      
      return {
        ...state,
        counters: {
          ...state.counters,
          [counterId]: (state.counters[counterId] || 0) + 1
        }
      };
    }
    
    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    case "START_GAME": {
      return {
        ...state,
        gameStarted: true,
        lastUpdate: Date.now()
      };
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
    case "LOAD_GAME": {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:', action.payload ? '–¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã' : '–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      if (!action.payload) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        safeDispatchGameEvent('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É', 'warning');
        return {
          ...initialState,
          gameStarted: true,
          lastUpdate: Date.now(),
          lastSaved: Date.now()
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!action.payload.resources || !action.payload.buildings) {
        console.error('‚ùå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        safeDispatchGameEvent('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É', 'error');
        return {
          ...initialState,
          gameStarted: true,
          lastUpdate: Date.now(),
          lastSaved: Date.now()
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É unlocks –∏ buildings –¥–ª—è practice
      const loadedState = { ...action.payload };
      
      if (loadedState.unlocks.practice && loadedState.buildings.practice) {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–¥–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
        loadedState.buildings.practice = {
          ...loadedState.buildings.practice,
          unlocked: true
        };
        console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∑–¥–∞–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ª–æ–≥–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      loadedState.lastUpdate = Date.now();
      
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      safeDispatchGameEvent('–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'success');
      
      return loadedState;
    }
    
    // –ü—Ä–µ—Å—Ç–∏–∂ (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –±–æ–Ω—É—Å–∞–º–∏)
    case "PRESTIGE": {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ –ø—Ä–µ—Å—Ç–∏–∂–∞
      const prestigePoints = Math.floor(
        Math.log(state.resources.usdt.value / 1000) * 10
      );
      
      return {
        ...initialState,
        prestigePoints: state.prestigePoints + Math.max(0, prestigePoints),
        gameStarted: true,
        lastUpdate: Date.now()
      };
    }
    
    // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    case "RESET_GAME": {
      return {
        ...initialState,
        gameStarted: true,
        lastUpdate: Date.now()
      };
    }
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
    case "RESTART_COMPUTERS": {
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –ø–æ—Å–ª–µ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞
      return {
        ...state,
        eventMessages: {
          ...state.eventMessages,
          electricityShortage: false
        }
      };
    }
    
    // –ú–∞–π–Ω–∏–Ω–≥ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏
    case "MINE_COMPUTING_POWER": {
      return processMiningPower(state);
    }
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π
    case "APPLY_KNOWLEDGE": {
      return processApplyKnowledge(state);
    }
    
    default:
      return state;
  }
};
