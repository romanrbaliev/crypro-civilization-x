
import { GameState } from '../types';
import { initialState } from '../initialState';
import { saveGameToServer, loadGameFromServer } from '@/api/gameDataService';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å –∏–º–µ–Ω–µ–º –∫–ª—é—á–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏)
export const GAME_STORAGE_KEY = 'cryptoCivilizationSave';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ localStorage
const isLocalStorageAvailable = () => {
  try {
    const testKey = '__test__';
    localStorage.setItem(testKey, testKey);
    localStorage.removeItem(testKey);
    return true;
  } catch (e) {
    console.warn('localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', e);
    return false;
  }
};

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å—Ä–µ–¥, –≥–¥–µ localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
let memoryStorage: Record<string, string> = {};

// –ì–ª—É–±–æ–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function deepMerge(target: any, source: any): any {
  const output = { ...target };
  
  for (const key in source) {
    if (source.hasOwnProperty(key)) {
      if (
        typeof source[key] === 'object' && 
        source[key] !== null &&
        !Array.isArray(source[key])
      ) {
        if (key in target && typeof target[key] === 'object' && target[key] !== null) {
          output[key] = deepMerge(target[key], source[key]);
        } else {
          output[key] = { ...source[key] };
        }
      } else {
        output[key] = source[key];
      }
    }
  }
  
  return output;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
export async function saveGameState(state: GameState): Promise<boolean> {
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    const stateToSave = {
      ...state,
      lastSaved: Date.now()
    };
    
    console.log(`üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã (—Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ~${JSON.stringify(stateToSave).length} –±–∞–π—Ç)`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
    const serverSaved = await saveGameToServer(stateToSave);
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ gameDataService
    if (!serverSaved) {
      console.warn('‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', error);
    return false;
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
export async function loadGameState(): Promise<GameState | null> {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–≥—Ä—ã...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    const loadedState = await loadGameFromServer();
    
    if (loadedState) {
      console.log(`‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (lastSaved: ${new Date(loadedState.lastSaved || 0).toLocaleTimeString() || '–Ω–µ –∑–∞–¥–∞–Ω–æ'})`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª—É–±–æ–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–ª–∏—è–Ω–∏—è –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
      const mergedState = deepMerge(initialState, loadedState);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      mergedState.lastUpdate = Date.now();
      
      return mergedState;
    }
    
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã');
    return null;
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', error);
    return null;
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
export async function clearGameState(): Promise<void> {
  try {
    console.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –∏–≥—Ä—ã...');
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ localStorage, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if (isLocalStorageAvailable()) {
      localStorage.removeItem(GAME_STORAGE_KEY);
      console.log('‚úÖ –°—Ç–∞—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ localStorage');
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
    delete memoryStorage[GAME_STORAGE_KEY];
    console.log('‚úÖ –°—Ç–∞—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ø–∞–º—è—Ç–∏');
    
    // –û—á–∏—â–∞–µ–º –Ω–æ–≤–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —á–µ—Ä–µ–∑ gameDataService
    import('@/api/gameDataService').then(module => {
      if (typeof module.clearAllSavedData === 'function') {
        module.clearAllSavedData();
      }
    });
    
    console.log('‚úÖ –í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã:', error);
  }
}
