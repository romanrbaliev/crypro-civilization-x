import React, { createContext, useReducer, useEffect, ReactNode, useState } from 'react';
import { GameState, GameAction, Resource, Building, Upgrade } from './types';
import { initialState } from './initialState';
import { gameReducer } from './gameReducer';
import { saveGameState, loadGameState } from './utils/gameStorage';
import { GameEventSystem } from './GameEventSystem';
import { isTelegramWebAppAvailable } from '@/utils/helpers';
import { toast } from "@/hooks/use-toast";
import { ensureGameEventBus } from './utils/eventBusUtils';
import { checkSupabaseConnection, createSavesTableIfNotExists } from '@/api/gameDataService';

export type { Resource, Building, Upgrade };

export interface GameContextProps {
  state: GameState;
  dispatch: React.Dispatch<GameAction>;
}

export const GameContext = createContext<GameContextProps | undefined>(undefined);

export { useGame } from './hooks/useGame';

const SAVE_INTERVAL = 15 * 1000;
const LOAD_TIMEOUT = 10000;

let loadMessageShown = false;
let saveMessageShown = false;
let connectionErrorShown = false;

let lastSaveTime = 0;
let isSavingInProgress = false;

interface GameProviderProps {
  children: ReactNode;
}

export function GameProvider({ children }: GameProviderProps) {
  useEffect(() => {
    ensureGameEventBus();
  }, []);
  
  const [loadedState, setLoadedState] = useState<GameState | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [loadingMessage, setLoadingMessage] = useState("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...");
  const [hasConnection, setHasConnection] = useState(true);
  const [gameInitialized, setGameInitialized] = useState(false);
  
  const isMountedRef = React.useRef(false);
  
  useEffect(() => {
    if (!isMountedRef.current) {
      const checkConnection = async () => {
        setLoadingMessage("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º...");
        const isConnected = await checkSupabaseConnection();
        setHasConnection(isConnected);
        
        if (isConnected) {
          await createSavesTableIfNotExists();
        } else if (!connectionErrorShown) {
          connectionErrorShown = true;
          toast({
            title: "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
            description: "–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ò–≥—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
            variant: "destructive",
          });
        }
      };
      
      checkConnection();
      
      const intervalId = setInterval(async () => {
        const isConnected = await checkSupabaseConnection();
        
        if (isConnected !== hasConnection) {
          setHasConnection(isConnected);
          
          if (isConnected) {
            toast({
              title: "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
              description: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.",
              variant: "success",
            });
            
            await createSavesTableIfNotExists();
          } else {
            toast({
              title: "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ",
              description: "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
              variant: "destructive",
            });
          }
        }
      }, 30000);
      
      return () => clearInterval(intervalId);
    }
  }, [hasConnection]);
  
  useEffect(() => {
    if (isMountedRef.current) return;
    isMountedRef.current = true;
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram WebApp –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ GameProvider...');
    if (isTelegramWebAppAvailable()) {
      console.log('‚úÖ Telegram WebApp –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
      try {
        const tg = window.Telegram.WebApp;
        
        if (typeof window !== 'undefined') {
          window.__FORCE_TELEGRAM_MODE = true;
          console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º Telegram WebApp –≤–∫–ª—é—á–µ–Ω');
        }
        
        if (typeof tg.ready === 'function') {
          tg.ready();
          console.log('‚úÖ Telegram WebApp ready –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        }
        
        if (typeof tg.expand === 'function') {
          tg.expand();
          console.log('‚úÖ Telegram WebApp —Ä–∞—Å—à–∏—Ä–µ–Ω –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω');
        }
        
        if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
          console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: id=${tg.initDataUnsafe.user.id}, username=${tg.initDataUnsafe.user.username || '–Ω–µ—Ç'}`);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', error);
      }
    } else {
      console.log('‚ÑπÔ∏è Telegram WebApp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞');
    }
  }, []);
  
  if (!hasConnection && !isLoading) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-b from-red-50 to-white text-center p-6">
        <div className="w-16 h-16 text-red-500 mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
        </div>
        <h1 className="text-2xl font-bold mb-2">–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º</h1>
        <p className="mb-6 text-gray-600">–î–ª—è —Ä–∞–±–æ—Ç—ã –∏–≥—Ä—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
        <button 
          className="px-6 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
          onClick={() => window.location.reload()}
        >
          –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
        </button>
      </div>
    );
  }
  
  const saveGame = async (gameState: GameState) => {
    if (!hasConnection) {
      console.log('‚ö†Ô∏è –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ');
      return;
    }
    
    if (isSavingInProgress) {
      console.log('‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return;
    }
    
    const now = Date.now();
    if (now - lastSaveTime < 2000) {
      console.log(`‚è±Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø—Ä–æ—à–ª–æ ${now - lastSaveTime}–º—Å)`);
      return;
    }
    
    isSavingInProgress = true;
    lastSaveTime = now;
    
    try {
      console.log(`üîÑ –ó–∞–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã –∏–∑ GameContext (—Ä–∞–∑–º–µ—Ä: ~${JSON.stringify(gameState).length}b)`);
      
      const success = await saveGameState(gameState);
      
      if (success) {
        console.log('‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ GameContext');
      } else {
        console.warn('‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ GameContext');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
    } finally {
      isSavingInProgress = false;
    }
  };
  
  useEffect(() => {
    const loadSavedGame = async () => {
      try {
        if (gameInitialized) return;
        
        setLoadingMessage("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...");
        ensureGameEventBus();
        
        setLoadingMessage("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º...");
        const isConnected = await checkSupabaseConnection();
        setHasConnection(isConnected);
        
        if (isConnected) {
          await createSavesTableIfNotExists();
        } else {
          setLoadingMessage("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
          setIsLoading(false);
          
          if (!connectionErrorShown) {
            connectionErrorShown = true;
            toast({
              title: "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
              description: "–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ò–≥—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
              variant: "destructive",
            });
          }
          
          return;
        }
        
        setLoadingMessage("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...");
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–≥—Ä—ã...');
        
        if (isTelegramWebAppAvailable()) {
          console.log('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω Telegram WebApp, —Ä–µ–∂–∏–º Telegram –∞–∫—Ç–∏–≤–µ–Ω');
          setLoadingMessage("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...");
          
          await new Promise(resolve => setTimeout(resolve, 500));
          
          try {
            if (window.Telegram?.WebApp?.CloudStorage) {
              setLoadingMessage("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –≤ Telegram...");
              console.log('‚úÖ CloudStorage API –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π...');
            } else {
              console.warn('‚ö†Ô∏è CloudStorage API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
          } catch (telegramError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ Telegram:', telegramError);
          }
        }
        
        await new Promise(resolve => setTimeout(resolve, 300));
        
        setLoadingMessage("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã...");
        
        const loadTimeoutId = setTimeout(() => {
          console.warn('‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É');
          setLoadedState(null);
          setIsLoading(false);
          setGameInitialized(true);
          
          if (!loadMessageShown && process.env.NODE_ENV !== 'development') {
            loadMessageShown = true;
            toast({
              title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
              description: "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.",
              variant: "destructive",
            });
          }
        }, LOAD_TIMEOUT);
        
        const savedState = await loadGameState();
        
        clearTimeout(loadTimeoutId);
        
        console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', savedState ? '–Ω–∞–π–¥–µ–Ω–æ' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        
        if (savedState) {
          console.log('üëâ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', JSON.stringify(savedState).substring(0, 100) + '...');
        }
        
        setLoadedState(savedState);
        setGameInitialized(true);
        
        if (savedState && !loadMessageShown && process.env.NODE_ENV !== 'development') {
          loadMessageShown = true;
          setTimeout(() => {
            toast({
              title: "–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞",
              description: "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
              variant: "default",
            });
          }, 1000);
        } else if (!savedState && !loadMessageShown && process.env.NODE_ENV !== 'development') {
          loadMessageShown = true;
          toast({
            title: "–ù–æ–≤–∞—è –∏–≥—Ä–∞",
            description: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.",
            variant: "default",
          });
        }
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', err);
        setGameInitialized(true);
        
        if (!loadMessageShown && process.env.NODE_ENV !== 'development') {
          loadMessageShown = true;
          toast({
            title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
            description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–≥—Ä—É. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.",
            variant: "destructive",
          });
        }
      } finally {
        setIsLoading(false);
      }
    };
    
    loadSavedGame();
  }, [gameInitialized]);
  
  const [initialGameState, initialDispatch] = useReducer(
    gameReducer, 
    { ...initialState, gameStarted: true, lastUpdate: Date.now(), lastSaved: Date.now() }
  );
  
  const [state, dispatch] = useReducer(
    gameReducer, 
    loadedState || initialGameState
  );
  
  useEffect(() => {
    if (loadedState && !isLoading && gameInitialized) {
      dispatch({ type: 'LOAD_GAME', payload: loadedState });
      
      setTimeout(() => {
        saveGame(state);
      }, 1000);
    }
  }, [loadedState, isLoading, gameInitialized]);
  
  useEffect(() => {
    if (!state.gameStarted || isLoading) return;
    
    const intervalId = setInterval(() => {
      dispatch({ type: 'UPDATE_RESOURCES' });
    }, 1000);
    
    return () => clearInterval(intervalId);
  }, [state.gameStarted, isLoading]);
  
  useEffect(() => {
    if (!state.gameStarted || isLoading || !hasConnection || !gameInitialized) return;
    
    console.log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã');
    
    const initialSaveTimeout = setTimeout(() => {
      saveGame(state);
    }, 2000);
    
    const intervalId = setInterval(() => {
      saveGame(state);
    }, SAVE_INTERVAL);
    
    return () => {
      clearTimeout(initialSaveTimeout);
      clearInterval(intervalId);
      console.log('üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
      saveGame(state);
    };
  }, [state, isLoading, hasConnection, gameInitialized]);
  
  useEffect(() => {
    if (!state.gameStarted || isLoading || !hasConnection) return;
    
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'hidden') {
        console.log('üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
        saveGame(state);
      }
    };
    
    const handleBeforeUnload = () => {
      console.log('üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
      saveGame(state);
    };
    
    const handleBlur = () => {
      console.log('üîÑ –û–∫–Ω–æ –ø–æ—Ç–µ—Ä—è–ª–æ —Ñ–æ–∫—É—Å, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
      saveGame(state);
    };
    
    const handleOnline = () => {
      console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
      setHasConnection(true);
      saveGame(state);
      
      if (!saveMessageShown && process.env.NODE_ENV !== 'development') {
        saveMessageShown = true;
        toast({
          title: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
          description: "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω.",
          variant: "success",
        });
      }
    };
    
    const handleOffline = () => {
      console.log('‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ç—å—é –ø–æ—Ç–µ—Ä—è–Ω–æ');
      setHasConnection(false);
      
      if (!saveMessageShown && process.env.NODE_ENV !== 'development') {
        saveMessageShown = true;
        toast({
          title: "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æÔøΩÔøΩ–µ—Ä—è–Ω–æ",
          description: "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ. –ò–≥—Ä–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
          variant: "destructive",
        });
      }
    };
    
    const handleUpdateReferralStatus = (event: CustomEvent) => {
      const { referralId, activated } = event.detail;
      console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ GameContext: ${referralId}, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω=${activated}`);
      
      dispatch({
        type: "UPDATE_REFERRAL_STATUS",
        payload: { referralId, activated }
      });
    };
    
    document.addEventListener('visibilitychange', handleVisibilityChange);
    window.addEventListener('beforeunload', handleBeforeUnload);
    window.addEventListener('blur', handleBlur);
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    window.addEventListener('update-referral-status', handleUpdateReferralStatus as EventListener);
    
    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
      window.removeEventListener('beforeunload', handleBeforeUnload);
      window.removeEventListener('blur', handleBlur);
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
      window.removeEventListener('update-referral-status', handleUpdateReferralStatus as EventListener);
    };
  }, [state, isLoading, hasConnection]);
  
  if (isLoading) {
    return (
      <div className="flex flex-col items-center justify-center h-screen bg-gradient-to-b from-gray-900 to-gray-800 text-white">
        <div className="w-16 h-16 border-t-4 border-blue-500 border-solid rounded-full animate-spin mb-4"></div>
        <div className="text-xl font-bold mb-2">{loadingMessage}</div>
        <div className="text-sm text-gray-300">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</div>
      </div>
    );
  }
  
  return (
    <GameContext.Provider value={{ state, dispatch }}>
      <GameEventSystem />
      {children}
    </GameContext.Provider>
  );
}
