
import React, { createContext, useContext, useReducer, useEffect } from "react";
import { toast } from "sonner";
import { resources } from "@/utils/gameConfig";

// –¢–∏–ø—ã —Ä–µ—Å—É—Ä—Å–æ–≤
export interface Resource {
  id: string;
  name: string;
  icon: string;
  value: number;
  perSecond: number;
  unlocked: boolean;
  max: number;
}

// –¢–∏–ø—ã –∞–ø–≥—Ä–µ–π–¥–æ–≤
export interface Upgrade {
  id: string;
  name: string;
  description: string;
  cost: { [key: string]: number };
  effect: { [key: string]: number };
  unlocked: boolean;
  purchased: boolean;
  requirements?: { [key: string]: number };
}

// –¢–∏–ø—ã –∑–¥–∞–Ω–∏–π
export interface Building {
  id: string;
  name: string;
  description: string;
  cost: { [key: string]: number };
  costMultiplier: number;
  production: { [key: string]: number };
  count: number;
  unlocked: boolean;
  requirements?: { [key: string]: number };
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
interface GameState {
  resources: { [key: string]: Resource };
  upgrades: { [key: string]: Upgrade };
  buildings: { [key: string]: Building };
  unlocks: { [key: string]: boolean };
  lastUpdate: number;
  gameStarted: boolean;
  prestigePoints: number;
  phase: number;
}

// –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
type GameAction =
  | { type: "INCREMENT_RESOURCE"; payload: { resourceId: string; amount: number } }
  | { type: "UPDATE_RESOURCES" }
  | { type: "PURCHASE_BUILDING"; payload: { buildingId: string } }
  | { type: "PURCHASE_UPGRADE"; payload: { upgradeId: string } }
  | { type: "UNLOCK_FEATURE"; payload: { featureId: string } }
  | { type: "START_GAME" }
  | { type: "LOAD_GAME"; payload: GameState }
  | { type: "PRESTIGE" };

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
const initialBuildings: { [key: string]: Building } = {
  practice: {
    id: "practice",
    name: "–ü—Ä–∞–∫—Ç–∏–∫–∞",
    description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑—É—á–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É",
    cost: { usdt: 10 },
    costMultiplier: 1.15,
    production: { knowledge: 0.63 },
    count: 0,
    unlocked: false,
    requirements: { knowledge: 15 }
  },
  generator: {
    id: "generator",
    name: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
    description: "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤–∞—à–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
    cost: { usdt: 25 },
    costMultiplier: 1.15,
    production: { electricity: 0.5 },
    count: 0,
    unlocked: false,
    requirements: { usdt: 20 }
  },
  homeComputer: {
    id: "homeComputer",
    name: "–î–æ–º–∞—à–Ω–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä",
    description: "–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å",
    cost: { usdt: 30, electricity: 5 },
    costMultiplier: 1.15,
    production: { computingPower: 2 },
    count: 0,
    unlocked: false,
    requirements: { usdt: 25, electricity: 10 }
  },
  cryptoWallet: {
    id: "cryptoWallet",
    name: "–ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫",
    description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ USDT",
    cost: { usdt: 15, knowledge: 25 },
    costMultiplier: 1.2,
    production: { usdtMax: 50 },
    count: 0,
    unlocked: false,
    requirements: { knowledge: 20 }
  },
  internetConnection: {
    id: "internetConnection",
    name: "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∫–∞–Ω–∞–ª",
    description: "–£—Å–∫–æ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π",
    cost: { usdt: 50 },
    costMultiplier: 1.3,
    production: { knowledgeBoost: 0.2 },
    count: 0,
    unlocked: false,
    requirements: { usdt: 45 }
  }
};

const initialUpgrades: { [key: string]: Upgrade } = {
  basicBlockchain: {
    id: "basicBlockchain",
    name: "–û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω–∞",
    description: "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
    cost: { knowledge: 50 },
    effect: { knowledgeBoost: 0.1 },
    unlocked: false,
    purchased: false,
    requirements: { knowledge: 45 }
  },
  cryptoTrading: {
    id: "cryptoTrading",
    name: "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥",
    description: "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–º–µ–Ω–∞ –º–µ–∂–¥—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏",
    cost: { knowledge: 100, usdt: 20 },
    effect: { conversionRate: 0.15 },
    unlocked: false,
    purchased: false,
    requirements: { knowledge: 80, usdt: 15 }
  },
  walletSecurity: {
    id: "walletSecurity",
    name: "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–æ–≤",
    description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
    cost: { knowledge: 75 },
    effect: { usdtMaxBoost: 0.25 },
    unlocked: false,
    purchased: false,
    requirements: { knowledge: 70 }
  }
};

const initialState: GameState = {
  resources: {
    knowledge: {
      id: "knowledge",
      name: "–ó–Ω–∞–Ω–∏—è –æ –∫—Ä–∏–ø—Ç–µ",
      icon: "üß†",
      value: 0,
      perSecond: 0,
      unlocked: true,
      max: 100
    },
    usdt: {
      id: "usdt",
      name: "USDT",
      icon: "üí∞",
      value: 0,
      perSecond: 0,
      unlocked: false,
      max: 50
    },
    electricity: {
      id: "electricity",
      name: "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ",
      icon: "‚ö°",
      value: 0,
      perSecond: 0,
      unlocked: false,
      max: 1000
    },
    computingPower: {
      id: "computingPower",
      name: "–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å",
      icon: "üíª",
      value: 0,
      perSecond: 0,
      unlocked: false,
      max: 1000
    },
    reputation: {
      id: "reputation",
      name: "–†–µ–ø—É—Ç–∞—Ü–∏—è",
      icon: "‚≠ê",
      value: 0,
      perSecond: 0,
      unlocked: false,
      max: Infinity
    }
  },
  buildings: initialBuildings,
  upgrades: initialUpgrades,
  unlocks: {
    applyKnowledge: false,
    practice: false
  },
  lastUpdate: Date.now(),
  gameStarted: false,
  prestigePoints: 0,
  phase: 1
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const GameContext = createContext<{
  state: GameState;
  dispatch: React.Dispatch<GameAction>;
}>({
  state: initialState,
  dispatch: () => null
});

// –†–µ–¥—É–∫—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
const gameReducer = (state: GameState, action: GameAction): GameState => {
  switch (action.type) {
    case "INCREMENT_RESOURCE": {
      const { resourceId, amount } = action.payload;
      const resource = state.resources[resourceId];
      
      if (!resource.unlocked) return state;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º—É–º
      const newValue = Math.min(resource.value + amount, resource.max);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –æ—Ç–ø–∏—Ä–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
      let newUnlocks = { ...state.unlocks };
      let newResources = { ...state.resources };
      
      // –ï—Å–ª–∏ –∑–Ω–∞–Ω–∏—è –¥–æ—Å—Ç–∏–≥–ª–∏ 10, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è"
      if (resourceId === "knowledge" && newValue >= 10 && !state.unlocks.applyKnowledge) {
        newUnlocks.applyKnowledge = true;
        toast.success("–û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è");
      }
      
      // –ï—Å–ª–∏ –∑–Ω–∞–Ω–∏—è –¥–æ—Å—Ç–∏–≥–ª–∏ 15, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∑–¥–∞–Ω–∏–µ "–ü—Ä–∞–∫—Ç–∏–∫–∞"
      if (resourceId === "knowledge" && newValue >= 15 && !state.unlocks.practice) {
        const newBuildings = { ...state.buildings };
        newBuildings.practice.unlocked = true;
        newUnlocks.practice = true;
        toast.success("–û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ü—Ä–∞–∫—Ç–∏–∫–∞");
        return {
          ...state,
          resources: {
            ...state.resources,
            [resourceId]: {
              ...resource,
              value: newValue
            }
          },
          buildings: newBuildings,
          unlocks: newUnlocks
        };
      }
      
      // –ï—Å–ª–∏ USDT –¥–æ—Å—Ç–∏–≥ 20, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä
      if (resourceId === "usdt" && newValue >= 20 && !state.buildings.generator.unlocked) {
        const newBuildings = { ...state.buildings };
        newBuildings.generator.unlocked = true;
        toast.success("–û—Ç–∫—Ä—ã—Ç–æ –Ω–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä");
        return {
          ...state,
          resources: {
            ...state.resources,
            [resourceId]: {
              ...resource,
              value: newValue
            }
          },
          buildings: newBuildings,
          unlocks: newUnlocks
        };
      }
      
      // –ï—Å–ª–∏ USDT –∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω—É–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –î–æ–º–∞—à–Ω–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä
      if ((resourceId === "usdt" && newValue >= 25 && state.resources.electricity.value >= 10) ||
          (resourceId === "electricity" && newValue >= 10 && state.resources.usdt.value >= 25)) {
        if (!state.buildings.homeComputer.unlocked) {
          const newBuildings = { ...state.buildings };
          newBuildings.homeComputer.unlocked = true;
          toast.success("–û—Ç–∫—Ä—ã—Ç–æ –Ω–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ: –î–æ–º–∞—à–Ω–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä");
          return {
            ...state,
            resources: {
              ...state.resources,
              [resourceId]: {
                ...resource,
                value: newValue
              }
            },
            buildings: newBuildings,
            unlocks: newUnlocks
          };
        }
      }
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º USDT –µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ—Ç–∫—Ä—ã—Ç –∏ —É–∂–µ –µ—Å—Ç—å –∑–Ω–∞–Ω–∏—è
      if (resourceId === "knowledge" && newValue >= 5 && !state.resources.usdt.unlocked) {
        newResources.usdt.unlocked = true;
        toast.success("–û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å: USDT");
      }
      
      return {
        ...state,
        resources: {
          ...state.resources,
          [resourceId]: {
            ...resource,
            value: newValue
          },
          ...newResources
        },
        unlocks: newUnlocks
      };
    }
    
    case "UPDATE_RESOURCES": {
      const now = Date.now();
      const deltaTime = (now - state.lastUpdate) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      
      // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 0.1 —Å–µ–∫—É–Ω–¥—ã, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
      if (deltaTime < 0.1) return state;
      
      const newResources = { ...state.resources };
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –æ—Ç –∑–¥–∞–Ω–∏–π
      for (const building of Object.values(state.buildings)) {
        if (building.count === 0) continue;
        
        for (const [resourceId, amount] of Object.entries(building.production)) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
          if (resourceId.includes('Max')) {
            const actualResourceId = resourceId.replace('Max', '');
            if (newResources[actualResourceId]) {
              // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã –∑–¥–µ—Å—å, —Ç–æ–ª—å–∫–æ —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º
              continue;
            }
          } else if (resourceId.includes('Boost')) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
            continue;
          } else if (newResources[resourceId]) {
            // –û–±—ã—á–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã: –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤ —Å–µ–∫—É–Ω–¥—É * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–∞–Ω–∏–π * –¥–µ–ª—å—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            const resourceAmount = amount * building.count * deltaTime;
            newResources[resourceId].value = Math.min(
              newResources[resourceId].value + resourceAmount,
              newResources[resourceId].max
            );
            newResources[resourceId].perSecond = amount * building.count;
          }
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–¥–∞–Ω–∏–π
      for (const building of Object.values(state.buildings)) {
        if (building.count === 0) continue;
        
        for (const [resourceId, amount] of Object.entries(building.production)) {
          if (resourceId.includes('Max')) {
            const actualResourceId = resourceId.replace('Max', '');
            if (newResources[actualResourceId]) {
              newResources[actualResourceId].max = initialState.resources[actualResourceId].max + 
                amount * building.count;
            }
          }
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É
      let knowledgeBoost = 1;
      let usdtMaxBoost = 1;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–∞–Ω–∏—è, –¥–∞—é—â–∏–µ –±–æ–Ω—É—Å—ã
      for (const building of Object.values(state.buildings)) {
        if (building.count === 0) continue;
        
        for (const [resourceId, amount] of Object.entries(building.production)) {
          if (resourceId === 'knowledgeBoost') {
            knowledgeBoost += amount * building.count;
          }
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ø–≥—Ä–µ–π–¥—ã, –¥–∞—é—â–∏–µ –±–æ–Ω—É—Å—ã
      for (const upgrade of Object.values(state.upgrades)) {
        if (!upgrade.purchased) continue;
        
        for (const [effectId, amount] of Object.entries(upgrade.effect)) {
          if (effectId === 'knowledgeBoost') {
            knowledgeBoost += amount;
          } else if (effectId === 'usdtMaxBoost') {
            usdtMaxBoost += amount;
          }
        }
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã
      if (knowledgeBoost !== 1) {
        for (const building of Object.values(state.buildings)) {
          if (building.count === 0) continue;
          
          if (building.production.knowledge) {
            const boostedProduction = building.production.knowledge * knowledgeBoost;
            newResources.knowledge.perSecond = boostedProduction * building.count;
          }
        }
      }
      
      if (usdtMaxBoost !== 1) {
        newResources.usdt.max = newResources.usdt.max * usdtMaxBoost;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤—ã—Ö –∞–ø–≥—Ä–µ–π–¥–æ–≤
      const newUpgrades = { ...state.upgrades };
      for (const upgrade of Object.values(newUpgrades)) {
        if (upgrade.unlocked || upgrade.purchased) continue;
        
        let canUnlock = true;
        for (const [resourceId, requiredAmount] of Object.entries(upgrade.requirements || {})) {
          if (!newResources[resourceId] || newResources[resourceId].value < requiredAmount) {
            canUnlock = false;
            break;
          }
        }
        
        if (canUnlock) {
          upgrade.unlocked = true;
          toast.success(`–ù–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: ${upgrade.name}`);
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤—ã—Ö –∑–¥–∞–Ω–∏–π
      const newBuildings = { ...state.buildings };
      for (const building of Object.values(newBuildings)) {
        if (building.unlocked) continue;
        
        let canUnlock = true;
        for (const [resourceId, requiredAmount] of Object.entries(building.requirements || {})) {
          if (!newResources[resourceId] || newResources[resourceId].value < requiredAmount) {
            canUnlock = false;
            break;
          }
        }
        
        if (canUnlock) {
          building.unlocked = true;
          toast.success(`–ù–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: ${building.name}`);
        }
      }
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
      if (state.buildings.generator.count > 0 && !newResources.electricity.unlocked) {
        newResources.electricity.unlocked = true;
        toast.success("–û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å: –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ");
      }
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–º–∞—à–Ω–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä
      if (state.buildings.homeComputer.count > 0 && !newResources.computingPower.unlocked) {
        newResources.computingPower.unlocked = true;
        toast.success("–û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å: –í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å");
      }
      
      return {
        ...state,
        resources: newResources,
        lastUpdate: now,
        upgrades: newUpgrades,
        buildings: newBuildings
      };
    }
    
    case "PURCHASE_BUILDING": {
      const { buildingId } = action.payload;
      const building = state.buildings[buildingId];
      
      if (!building.unlocked) return state;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
      for (const [resourceId, cost] of Object.entries(building.cost)) {
        const resource = state.resources[resourceId];
        const actualCost = cost * Math.pow(building.costMultiplier, building.count);
        
        if (resource.value < actualCost) {
          toast.error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${resource.name} –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ${building.name}`);
          return state;
        }
      }
      
      // –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–¥–∞–Ω–∏—è –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
      const newResources = { ...state.resources };
      for (const [resourceId, cost] of Object.entries(building.cost)) {
        const actualCost = cost * Math.pow(building.costMultiplier, building.count);
        newResources[resourceId].value -= actualCost;
      }
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–∞–Ω–∏—è
      const newBuildings = { ...state.buildings };
      newBuildings[buildingId].count += 1;
      
      toast.success(`–ü–æ—Å—Ç—Ä–æ–µ–Ω–æ: ${building.name}`);
      
      return {
        ...state,
        resources: newResources,
        buildings: newBuildings
      };
    }
    
    case "PURCHASE_UPGRADE": {
      const { upgradeId } = action.payload;
      const upgrade = state.upgrades[upgradeId];
      
      if (!upgrade.unlocked || upgrade.purchased) return state;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
      for (const [resourceId, cost] of Object.entries(upgrade.cost)) {
        const resource = state.resources[resourceId];
        
        if (resource.value < cost) {
          toast.error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${resource.name} –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è ${upgrade.name}`);
          return state;
        }
      }
      
      // –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞ –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
      const newResources = { ...state.resources };
      for (const [resourceId, cost] of Object.entries(upgrade.cost)) {
        newResources[resourceId].value -= cost;
      }
      
      // –û—Ç–º–µ—á–∞–µ–º –∞–ø–≥—Ä–µ–π–¥ –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–π
      const newUpgrades = { ...state.upgrades };
      newUpgrades[upgradeId].purchased = true;
      
      toast.success(`–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ: ${upgrade.name}`);
      
      return {
        ...state,
        resources: newResources,
        upgrades: newUpgrades
      };
    }
    
    case "UNLOCK_FEATURE": {
      const { featureId } = action.payload;
      
      return {
        ...state,
        unlocks: {
          ...state.unlocks,
          [featureId]: true
        }
      };
    }
    
    case "START_GAME": {
      return {
        ...state,
        gameStarted: true,
        lastUpdate: Date.now()
      };
    }
    
    case "LOAD_GAME": {
      return {
        ...action.payload,
        lastUpdate: Date.now()
      };
    }
    
    case "PRESTIGE": {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ –ø—Ä–µ—Å—Ç–∏–∂–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      const totalWorth = Object.values(state.resources).reduce((sum, resource) => {
        return sum + resource.value;
      }, 0);
      
      const newPrestigePoints = state.prestigePoints + Math.floor(Math.log(totalWorth / 1000 + 1) * 10);
      
      toast.success(`–ö—Ä–∏–ø—Ç–æ–∑–∏–º–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${newPrestigePoints - state.prestigePoints} –æ—á–∫–æ–≤ –∫—Ä–∏–ø—Ç–æ–º—É–¥—Ä–æ—Å—Ç–∏`);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∫–∏ –ø—Ä–µ—Å—Ç–∏–∂–∞
      return {
        ...initialState,
        prestigePoints: newPrestigePoints,
        lastUpdate: Date.now()
      };
    }
    
    default:
      return state;
  }
};

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const GameProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [state, dispatch] = useReducer(gameReducer, initialState);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã –∏–∑ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const savedGame = localStorage.getItem("cryptoCivilizationSave");
    if (savedGame) {
      try {
        const parsedSave = JSON.parse(savedGame);
        dispatch({ type: "LOAD_GAME", payload: parsedSave });
        toast.success("–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã:", error);
        toast.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã");
      }
    }
  }, []);
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  useEffect(() => {
    if (!state.gameStarted) return;
    
    const intervalId = setInterval(() => {
      dispatch({ type: "UPDATE_RESOURCES" });
    }, 1000);
    
    return () => clearInterval(intervalId);
  }, [state.gameStarted]);
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    if (!state.gameStarted) return;
    
    const saveGame = () => {
      localStorage.setItem("cryptoCivilizationSave", JSON.stringify(state));
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const saveIntervalId = setInterval(saveGame, 30000);
    
    // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏/–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener("beforeunload", saveGame);
    
    return () => {
      clearInterval(saveIntervalId);
      window.removeEventListener("beforeunload", saveGame);
    };
  }, [state]);
  
  return (
    <GameContext.Provider value={{ state, dispatch }}>
      {children}
    </GameContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useGame = () => useContext(GameContext);
