
import { GameState } from '@/context/types';
import { unlockableItemsRegistry } from './registry';
import { UnlockCondition, UnlockableItem } from './types';
import { safeDispatchGameEvent } from '@/context/utils/eventBusUtils';

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏ –≤ –∏–≥—Ä–µ
 */
export class UnlockManager {
  private gameState: GameState;
  private debugMode: boolean;
  private steps: string[] = [];
  private lockedItems: string[] = [];
  private unlockedItems: string[] = [];

  constructor(gameState: GameState, debugMode: boolean = false) {
    this.gameState = gameState;
    this.debugMode = debugMode;
    this.steps = [];
    this.lockedItems = [];
    this.unlockedItems = [];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
   */
  private checkCondition(condition: UnlockCondition): boolean {
    if (this.debugMode) {
      this.steps.push(`‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è: ${condition.description}`);
    }

    switch (condition.type) {
      case 'resource':
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–∞
        const resource = this.gameState.resources[condition.targetId];
        if (!resource) {
          if (this.debugMode) this.steps.push(`  ‚Ä¢ –†–µ—Å—É—Ä—Å ${condition.targetId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          return false;
        }
        
        // –ü—Ä–∏–≤–æ–¥–∏–º targetValue –∫ —á–∏—Å–ª—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        const resourceTargetValue = Number(condition.targetValue);
        
        if (condition.operator === 'gte') {
          const result = resource.value >= resourceTargetValue;
          if (this.debugMode) {
            this.steps.push(`  ‚Ä¢ –†–µ—Å—É—Ä—Å ${condition.targetId}: ${resource.value} >= ${resourceTargetValue} = ${result}`);
          }
          return result;
        }
        
        if (condition.operator === 'eq') {
          const result = resource.value === resourceTargetValue;
          if (this.debugMode) {
            this.steps.push(`  ‚Ä¢ –†–µ—Å—É—Ä—Å ${condition.targetId}: ${resource.value} === ${resourceTargetValue} = ${result}`);
          }
          return result;
        }
        break;
        
      case 'building':
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–∞–Ω–∏—è
        const building = this.gameState.buildings[condition.targetId];
        if (!building) {
          if (this.debugMode) this.steps.push(`  ‚Ä¢ –ó–¥–∞–Ω–∏–µ ${condition.targetId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          return false;
        }
        
        // –ü—Ä–∏–≤–æ–¥–∏–º targetValue –∫ —á–∏—Å–ª—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        const buildingTargetValue = Number(condition.targetValue);
        
        if (condition.operator === 'gte') {
          const result = building.count >= buildingTargetValue;
          if (this.debugMode) {
            this.steps.push(`  ‚Ä¢ –ó–¥–∞–Ω–∏–µ ${condition.targetId}: ${building.count} >= ${buildingTargetValue} = ${result}`);
          }
          return result;
        }
        
        if (condition.operator === 'eq') {
          const result = building.count === buildingTargetValue;
          if (this.debugMode) {
            this.steps.push(`  ‚Ä¢ –ó–¥–∞–Ω–∏–µ ${condition.targetId}: ${building.count} === ${buildingTargetValue} = ${result}`);
          }
          return result;
        }
        break;
        
      case 'upgrade':
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—É–ø–ª–µ–Ω–æ –ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ
        const upgrade = this.gameState.upgrades[condition.targetId];
        if (!upgrade) {
          if (this.debugMode) this.steps.push(`  ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ ${condition.targetId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          return false;
        }
        
        if (condition.operator === 'eq') {
          // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é bool —Å bool
          const targetValueAsBool = Boolean(condition.targetValue);
          const upgradePurchased = Boolean(upgrade.purchased);
          const result = upgradePurchased === targetValueAsBool;
          
          if (this.debugMode) {
            this.steps.push(`  ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ ${condition.targetId} –∫—É–ø–ª–µ–Ω–æ: ${upgradePurchased} === ${targetValueAsBool} = ${result}`);
          }
          return result;
        }
        break;
        
      case 'counter':
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
        const counter = this.gameState.counters[condition.targetId];
        if (!counter) {
          if (this.debugMode) this.steps.push(`  ‚Ä¢ –°—á–µ—Ç—á–∏–∫ ${condition.targetId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          return false;
        }
        
        const counterValue = typeof counter === 'number' ? counter : counter.value;
        // –ü—Ä–∏–≤–æ–¥–∏–º targetValue –∫ —á–∏—Å–ª—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        const counterTargetValue = Number(condition.targetValue);
        
        if (condition.operator === 'gte') {
          const result = counterValue >= counterTargetValue;
          if (this.debugMode) {
            this.steps.push(`  ‚Ä¢ –°—á–µ—Ç—á–∏–∫ ${condition.targetId}: ${counterValue} >= ${counterTargetValue} = ${result}`);
          }
          return result;
        }
        
        if (condition.operator === 'eq') {
          const result = counterValue === counterTargetValue;
          if (this.debugMode) {
            this.steps.push(`  ‚Ä¢ –°—á–µ—Ç—á–∏–∫ ${condition.targetId}: ${counterValue} === ${counterTargetValue} = ${result}`);
          }
          return result;
        }
        break;
    }
    
    if (this.debugMode) this.steps.push(`  ‚Ä¢ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä`);
    return false;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  private checkAllConditions(item: UnlockableItem): boolean {
    if (this.debugMode) {
      this.steps.push(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è ${item.type} "${item.name}"`);
    }
    
    // –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–π –Ω–µ—Ç, —ç–ª–µ–º–µ–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (!item.conditions || item.conditions.length === 0) {
      if (this.debugMode) this.steps.push(`‚Ä¢ –ù–µ—Ç —É—Å–ª–æ–≤–∏–π, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è
    const result = item.conditions.every(condition => this.checkCondition(condition));
    if (this.debugMode) {
      this.steps.push(`‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result ? "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ" : "‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ"}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      if (!result) {
        this.steps.push(`‚Ä¢ –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã—à–µ`);
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ/–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    if (result) {
      this.unlockedItems.push(item.name);
    } else {
      this.lockedItems.push(item.name);
    }
    
    return result;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
   */
  public updateGameState(state: GameState): GameState {
    let updatedState = { ...state };
    
    if (this.debugMode) {
      this.steps.push("üîì –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫");
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    this.unlockedItems = [];
    this.lockedItems = [];
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –≤ —Ä–µ–µ—Å—Ç—Ä–µ
    Object.values(unlockableItemsRegistry).forEach(item => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è
      if (!item.autoUnlock) return;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      const shouldBeUnlocked = this.checkAllConditions(item);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
      switch (item.type) {
        case 'resource':
          // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–µ–π—á–∞—Å
          if (shouldBeUnlocked && !updatedState.resources[item.id]?.unlocked) {
            if (this.debugMode) {
              this.steps.push(`‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ä–µ—Å—É—Ä—Å: ${item.name}`);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å
            updatedState.resources = {
              ...updatedState.resources,
              [item.id]: {
                ...updatedState.resources[item.id],
                unlocked: true
              }
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            updatedState.unlocks = {
              ...updatedState.unlocks,
              [item.id]: true
            };
          } else if (!shouldBeUnlocked && updatedState.resources[item.id]?.unlocked) {
            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–µ–π—á–∞—Å
            if (this.debugMode) {
              this.steps.push(`‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ä–µ—Å—É—Ä—Å: ${item.name}`);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å
            updatedState.resources = {
              ...updatedState.resources,
              [item.id]: {
                ...updatedState.resources[item.id],
                unlocked: false
              }
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            updatedState.unlocks = {
              ...updatedState.unlocks,
              [item.id]: false
            };
          }
          break;
          
        case 'building':
          // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–µ–π—á–∞—Å
          if (shouldBeUnlocked && !updatedState.buildings[item.id]?.unlocked) {
            if (this.debugMode) {
              this.steps.push(`‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∑–¥–∞–Ω–∏–µ: ${item.name}`);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–∞–Ω–∏–µ
            updatedState.buildings = {
              ...updatedState.buildings,
              [item.id]: {
                ...updatedState.buildings[item.id],
                unlocked: true
              }
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            updatedState.unlocks = {
              ...updatedState.unlocks,
              [item.id]: true
            };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π
            const buildingsUnlockedCounter = updatedState.counters.buildingsUnlocked || 
                                             { id: 'buildingsUnlocked', name: 'buildingsUnlocked', value: 0 };
            
            const currentValue = typeof buildingsUnlockedCounter === 'number' ? 
                                 buildingsUnlockedCounter : buildingsUnlockedCounter.value;
            
            updatedState.counters = {
              ...updatedState.counters,
              buildingsUnlocked: {
                ...(typeof buildingsUnlockedCounter === 'object' ? buildingsUnlockedCounter : { id: 'buildingsUnlocked', name: 'buildingsUnlocked' }),
                value: currentValue + 1
              }
            };
            
            if (this.debugMode) {
              this.steps.push(`üìä –£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π (buildingsUnlocked): ${currentValue} -> ${currentValue + 1}`);
            }
          } else if (!shouldBeUnlocked && updatedState.buildings[item.id]?.unlocked) {
            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–µ–π—á–∞—Å
            if (this.debugMode) {
              this.steps.push(`‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∑–¥–∞–Ω–∏–µ: ${item.name}`);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–∞–Ω–∏–µ
            updatedState.buildings = {
              ...updatedState.buildings,
              [item.id]: {
                ...updatedState.buildings[item.id],
                unlocked: false
              }
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            updatedState.unlocks = {
              ...updatedState.unlocks,
              [item.id]: false
            };
            
            // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π
            const buildingsUnlockedCounter = updatedState.counters.buildingsUnlocked || 
                                             { id: 'buildingsUnlocked', name: 'buildingsUnlocked', value: 0 };
            
            const currentValue = typeof buildingsUnlockedCounter === 'number' ? 
                                 buildingsUnlockedCounter : buildingsUnlockedCounter.value;
            
            if (currentValue > 0) {
              updatedState.counters = {
                ...updatedState.counters,
                buildingsUnlocked: {
                  ...(typeof buildingsUnlockedCounter === 'object' ? buildingsUnlockedCounter : { id: 'buildingsUnlocked', name: 'buildingsUnlocked' }),
                  value: currentValue - 1
                }
              };
              
              if (this.debugMode) {
                this.steps.push(`üìä –£–º–µ–Ω—å—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π (buildingsUnlocked): ${currentValue} -> ${currentValue - 1}`);
              }
            }
          }
          break;
          
        case 'upgrade':
          // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–µ–π—á–∞—Å
          if (shouldBeUnlocked && !updatedState.upgrades[item.id]?.unlocked) {
            if (this.debugMode) {
              this.steps.push(`‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ: ${item.name}`);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
            updatedState.upgrades = {
              ...updatedState.upgrades,
              [item.id]: {
                ...updatedState.upgrades[item.id],
                unlocked: true
              }
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            updatedState.unlocks = {
              ...updatedState.unlocks,
              [item.id]: true
            };
          } else if (!shouldBeUnlocked && updatedState.upgrades[item.id]?.unlocked) {
            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–µ–π—á–∞—Å
            if (this.debugMode) {
              this.steps.push(`‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ: ${item.name}`);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
            updatedState.upgrades = {
              ...updatedState.upgrades,
              [item.id]: {
                ...updatedState.upgrades[item.id],
                unlocked: false
              }
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            updatedState.unlocks = {
              ...updatedState.unlocks,
              [item.id]: false
            };
          }
          break;
          
        case 'feature':
          // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–µ–π—á–∞—Å
          if (shouldBeUnlocked && !updatedState.unlocks[item.id]) {
            if (this.debugMode) {
              this.steps.push(`‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: ${item.name}`);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            updatedState.unlocks = {
              ...updatedState.unlocks,
              [item.id]: true
            };
          } else if (!shouldBeUnlocked && updatedState.unlocks[item.id]) {
            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–µ–π—á–∞—Å
            if (this.debugMode) {
              this.steps.push(`‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: ${item.name}`);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            updatedState.unlocks = {
              ...updatedState.unlocks,
              [item.id]: false
            };
          }
          break;
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updatedState = this.checkInterfaceUnlocks(updatedState);
    
    if (this.debugMode) {
      this.steps.push("üîì –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫");
    }
    
    return updatedState;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
   */
  private checkInterfaceUnlocks(state: GameState): GameState {
    let updatedState = { ...state };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤–∫–ª–∞–¥–∫–∏ "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
    // –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–¥–∞–Ω–∏–µ
    const hasUnlockedBuildings = Object.values(state.buildings).some(building => building.unlocked);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—á–µ—Ç—á–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π
    const buildingsUnlockedCounter = state.counters.buildingsUnlocked;
    const buildingsUnlockedCount = buildingsUnlockedCounter ? 
      (typeof buildingsUnlockedCounter === 'number' ? buildingsUnlockedCounter : buildingsUnlockedCounter.value) : 0;
    
    if (this.debugMode) {
      this.steps.push(`üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–∫–ª–∞–¥–∫–∏ "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ":`);
      this.steps.push(`‚Ä¢ –ï—Å—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è: ${hasUnlockedBuildings ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç"}`);
      this.steps.push(`‚Ä¢ –°—á–µ—Ç—á–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π: ${buildingsUnlockedCount}`);
    }
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    if (hasUnlockedBuildings && buildingsUnlockedCount < 1) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è, –Ω–æ —Å—á–µ—Ç—á–∏–∫ < 1, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
      const actualUnlockedCount = Object.values(state.buildings).filter(b => b.unlocked).length;
      
      updatedState.counters = {
        ...updatedState.counters,
        buildingsUnlocked: {
          id: 'buildingsUnlocked',
          name: 'buildingsUnlocked',
          value: actualUnlockedCount
        }
      };
      
      if (this.debugMode) {
        this.steps.push(`üìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π: ${buildingsUnlockedCount} -> ${actualUnlockedCount}`);
      }
    }
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è
    if (hasUnlockedBuildings && !updatedState.unlocks.equipment) {
      updatedState.unlocks = {
        ...updatedState.unlocks,
        equipment: true
      };
      
      if (this.debugMode) {
        this.steps.push(`‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"`);
      }
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —ç—Ç–æ–º
      safeDispatchGameEvent('–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"!', 'success');
    } else if (!hasUnlockedBuildings && updatedState.unlocks.equipment) {
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π
      updatedState.unlocks = {
        ...updatedState.unlocks,
        equipment: false
      };
      
      if (this.debugMode) {
        this.steps.push(`‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫
    // (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É)
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π (–ø–æ–∫—É–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤–∫–ª–∞–¥–∫—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π)
    if (state.buildings.generator && state.buildings.generator.count > 0 && !state.unlocks.research) {
      updatedState.unlocks = {
        ...updatedState.unlocks,
        research: true
      };
      
      if (this.debugMode) {
        this.steps.push(`‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"`);
      }
      
      safeDispatchGameEvent('–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"!', 'success');
    }
    
    return updatedState;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç
   */
  public isUnlocked(itemId: string): boolean {
    const item = unlockableItemsRegistry[itemId];
    
    if (!item) {
      console.warn(`–≠–ª–µ–º–µ–Ω—Ç —Å ID "${itemId}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫`);
      return false;
    }
    
    switch (item.type) {
      case 'resource':
        return Boolean(this.gameState.resources[itemId]?.unlocked);
      case 'building':
        return Boolean(this.gameState.buildings[itemId]?.unlocked);
      case 'upgrade':
        return Boolean(this.gameState.upgrades[itemId]?.unlocked);
      case 'feature':
        return Boolean(this.gameState.unlocks[itemId]);
      default:
        return false;
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç
   */
  public forceUnlock(itemId: string): GameState {
    const item = unlockableItemsRegistry[itemId];
    
    if (!item) {
      console.warn(`–≠–ª–µ–º–µ–Ω—Ç —Å ID "${itemId}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫`);
      return this.gameState;
    }
    
    let newState = { ...this.gameState };
    
    switch (item.type) {
      case 'resource':
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å
        newState.resources = {
          ...newState.resources,
          [itemId]: {
            ...newState.resources[itemId],
            unlocked: true
          }
        };
        break;
      case 'building':
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∑–¥–∞–Ω–∏–µ
        newState.buildings = {
          ...newState.buildings,
          [itemId]: {
            ...newState.buildings[itemId],
            unlocked: true
          }
        };
        break;
      case 'upgrade':
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
        newState.upgrades = {
          ...newState.upgrades,
          [itemId]: {
            ...newState.upgrades[itemId],
            unlocked: true
          }
        };
        break;
    }
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –æ–±—â–µ–º —Ä–µ–µ—Å—Ç—Ä–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    newState.unlocks = {
      ...newState.unlocks,
      [itemId]: true
    };
    
    return newState;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
   */
  public forceCheckAllUnlocks(): GameState {
    this.debugMode = true;
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥–∏ –¥–ª—è –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.steps = [];
    this.steps.push("üìä –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫");
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π
    const unlockedBuildingsCount = Object.values(this.gameState.buildings).filter(b => b.unlocked).length;
    this.steps.push(`üèóÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π: ${unlockedBuildingsCount}`);
    
    // –°–≤–µ—Ä—è–µ–º —Å —Å—á–µ—Ç—á–∏–∫–æ–º
    const buildingsUnlockedCounter = this.gameState.counters.buildingsUnlocked;
    const counterValue = buildingsUnlockedCounter ? 
      (typeof buildingsUnlockedCounter === 'number' ? buildingsUnlockedCounter : buildingsUnlockedCounter.value) : 0;
    
    this.steps.push(`üìä –ó–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ buildingsUnlocked: ${counterValue}`);
    
    if (unlockedBuildingsCount !== counterValue) {
      this.steps.push(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ ${unlockedBuildingsCount} –∑–¥–∞–Ω–∏–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ —Å—á–µ—Ç—á–∏–∫ = ${counterValue}`);
      
      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫
      this.gameState = {
        ...this.gameState,
        counters: {
          ...this.gameState.counters,
          buildingsUnlocked: {
            id: 'buildingsUnlocked',
            name: 'buildingsUnlocked',
            value: unlockedBuildingsCount
          }
        }
      };
      
      this.steps.push(`‚úÖ –°—á–µ—Ç—á–∏–∫ buildingsUnlocked —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –¥–æ ${unlockedBuildingsCount}`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const updatedState = this.updateGameState(this.gameState);
    
    this.steps.push("üìä –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫");
    return updatedState;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  public getDebugSteps(): string[] {
    return this.steps;
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  public getUnlockedItems(): string[] {
    return this.unlockedItems;
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  public getLockedItems(): string[] {
    return this.lockedItems;
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö
   */
  public getUnlockReport(): { steps: string[], unlocked: string[], locked: string[] } {
    return {
      steps: this.steps,
      unlocked: this.unlockedItems,
      locked: this.lockedItems
    };
  }
}
