
import { useEffect, useCallback, useRef } from 'react';
import { useGame } from '@/context/hooks/useGame';
import { UnlockService } from '@/services/UnlockService';
import { useResourceSystem } from './useResourceSystem';
import { checkAllUnlocks } from '@/utils/unlockManager';
import { safeDispatchGameEvent } from '@/context/utils/eventBusUtils';
import { clearEffectCache } from '@/utils/effects/effectApplication';

/**
 * –•—É–∫ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
 */
export const useGameStateUpdateService = () => {
  const { state, dispatch, isPageVisible } = useGame();
  const { updateResources } = useResourceSystem();
  const unlockService = new UnlockService();
  const lastUpdateTimeRef = useRef<number>(Date.now());
  const frameCountRef = useRef<number>(0);
  const throttleRef = useRef<{ 
    lastResourceDebug: number,
    lastCacheCleanup: number,
    lastUnlockCheck: number,
    lastPerformanceCheck: number,
    frameTimings: number[]
  }>({ 
    lastResourceDebug: 0, 
    lastCacheCleanup: 0,
    lastUnlockCheck: 0,
    lastPerformanceCheck: 0,
    frameTimings: []
  });
  
  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
  const monitorPerformance = useCallback((frameTime: number) => {
    const { frameTimings } = throttleRef.current;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞ –≤ –º–∞—Å—Å–∏–≤ (–Ω–µ –±–æ–ª–µ–µ 60 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–¥—Ä–æ–≤)
    frameTimings.push(frameTime);
    if (frameTimings.length > 60) {
      frameTimings.shift();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    const now = Date.now();
    if (now - throttleRef.current.lastPerformanceCheck > 5000) {
      throttleRef.current.lastPerformanceCheck = now;
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞
      const avgFrameTime = frameTimings.reduce((sum, time) => sum + time, 0) / frameTimings.length;
      
      // –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–æ (> 50 –º—Å, —á—Ç–æ –º–µ–Ω—å—à–µ 20 FPS)
      if (avgFrameTime > 50 && frameTimings.length > 10) {
        console.warn(`[Performance] –í—ã—Å–æ–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞: ${avgFrameTime.toFixed(2)}–º—Å. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.`);
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é
        clearEffectCache();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        throttleRef.current.frameTimings = [];
      }
    }
  }, []);
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
   */
  const updateGameState = useCallback(() => {
    frameCountRef.current += 1;
    
    if (isPageVisible && state.gameStarted) {
      const startTime = performance.now();
      const currentTime = Date.now();
      const deltaTime = currentTime - lastUpdateTimeRef.current;
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ (–º–µ–Ω—å—à–µ 16–º—Å - ~60 fps)
      if (deltaTime < 16) {
        return;
      }
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–∫–∞—á–∫–æ–≤
      const safeDeltatime = Math.min(deltaTime, 1000); // –ú–∞–∫—Å–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞
      
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        updateResources(safeDeltatime);
        lastUpdateTimeRef.current = currentTime;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º lastUpdate –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        dispatch({ type: 'TICK', payload: { currentTime } });
        
        // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
        const now = Date.now();
        if (now - throttleRef.current.lastCacheCleanup > 30000) { // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
          throttleRef.current.lastCacheCleanup = now;
          clearEffectCache();
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Ä–µ–∂–µ, —á–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        if (now - throttleRef.current.lastUnlockCheck > 2000) { // –ö–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
          throttleRef.current.lastUnlockCheck = now;
          dispatch({ type: 'CHECK_UNLOCKS' });
        }
        
        // –ò–∑–º–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        const frameTime = performance.now() - startTime;
        monitorPerformance(frameTime);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
      }
    }
  }, [isPageVisible, state.gameStarted, dispatch, updateResources, monitorPerformance]);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
  useEffect(() => {
    if (!state.gameStarted) return;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    let animationFrameId: number;
    
    const updateFrame = () => {
      try {
        updateGameState();
        animationFrameId = requestAnimationFrame(updateFrame);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã:', error);
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        animationFrameId = requestAnimationFrame(updateFrame);
      }
    };
    
    animationFrameId = requestAnimationFrame(updateFrame);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    console.log(`üîÑ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ requestAnimationFrame`);
    
    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      cancelAnimationFrame(animationFrameId);
      console.log('üõë –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    };
  }, [updateGameState, state.gameStarted]);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
  useEffect(() => {
    if (!state.gameStarted) return;
    
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible') {
        const currentTime = Date.now();
        const offlineTime = currentTime - lastUpdateTimeRef.current;
        
        if (offlineTime > 1000) { // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
          try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
            const safeOfflineTime = Math.min(offlineTime, 300000); // –ù–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç
            updateResources(safeOfflineTime);
            lastUpdateTimeRef.current = currentTime;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã
            safeDispatchGameEvent({
              message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –ü—Ä–æ—à–ª–æ ${Math.floor(safeOfflineTime / 1000)} —Å–µ–∫.`,
              type: 'info'
            });
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à–∏
            clearEffectCache();
            
            console.log(`[GameResume] –ò–≥—Ä–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ ${safeOfflineTime}–º—Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è.`);
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
          }
        }
      }
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
    document.addEventListener('visibilitychange', handleVisibilityChange);
    
    // –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [state.gameStarted, updateResources]);
  
  return null;
};
