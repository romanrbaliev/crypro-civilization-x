
import { GameState } from '@/context/types';
import { safeDispatchGameEvent } from '@/context/utils/eventBusUtils';

// –¢–∏–ø—ã —É—Å–ª–æ–≤–∏–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
export type UnlockCondition = {
  resources?: { [resourceId: string]: number }; // –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ—Å—É—Ä—Å–∞–º
  buildings?: { [buildingId: string]: number }; // –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–¥–∞–Ω–∏—è–º
  buildingCount?: { [buildingId: string]: number }; // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∑–¥–∞–Ω–∏—è–º
  upgrades?: string[]; // –¢—Ä–µ–±—É–µ–º—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
  counters?: { [counterId: string]: number }; // –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—á–µ—Ç—á–∏–∫–∞–º
  custom?: (state: GameState) => boolean; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
};

// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
export function checkUnlockCondition(
  state: GameState,
  condition: UnlockCondition
): boolean {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Ä–µ—Å—É—Ä—Å–∞–º
  if (condition.resources) {
    for (const [resourceId, amount] of Object.entries(condition.resources)) {
      if (!state.resources[resourceId] || state.resources[resourceId].value < amount) {
        return false;
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∑–¥–∞–Ω–∏—è–º
  if (condition.buildings) {
    for (const [buildingId, count] of Object.entries(condition.buildings)) {
      if (!state.buildings[buildingId] || state.buildings[buildingId].count < count) {
        return false;
      }
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∑–¥–∞–Ω–∏—è–º
  if (condition.buildingCount) {
    for (const [buildingId, count] of Object.entries(condition.buildingCount)) {
      if (!state.buildings[buildingId] || state.buildings[buildingId].count < count) {
        return false;
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º
  if (condition.upgrades) {
    for (const upgradeId of condition.upgrades) {
      if (!state.upgrades[upgradeId] || !state.upgrades[upgradeId].purchased) {
        return false;
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Å—á–µ—Ç—á–∏–∫–∞–º
  if (condition.counters) {
    for (const [counterId, value] of Object.entries(condition.counters)) {
      const counter = state.counters[counterId];
      if (!counter || (typeof counter === 'object' && counter.value < value) || 
          (typeof counter === 'number' && counter < value)) {
        return false;
      }
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
  if (condition.custom && !condition.custom(state)) {
    return false;
  }

  // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
  return true;
}

// –ö–ª—é—á–µ–≤—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
export const UNLOCK_SEQUENCES = {
  // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–∏
  PRACTICE: (state: GameState) => {
    // –ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ 2-—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è"
    const applyKnowledgeCount = state.counters.applyKnowledge 
      ? (typeof state.counters.applyKnowledge === 'object' 
          ? state.counters.applyKnowledge.value 
          : state.counters.applyKnowledge)
      : 0;
    
    return applyKnowledgeCount >= 2;
  },
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
  BASIC_BLOCKCHAIN: (state: GameState) => {
    // "–û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω–∞" —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    return state.buildings.generator && state.buildings.generator.count > 0;
  },
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å–Ω–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
  CRYPTO_CURRENCY_BASICS: (state: GameState) => {
    // "–û—Å–Ω–æ–≤—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç" —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ "–û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω–∞"
    const basicBlockchainPurchased = state.upgrades.basicBlockchain?.purchased ||
                                    state.upgrades.blockchain_basics?.purchased ||
                                    state.upgrades.blockchainBasics?.purchased;
    return !!basicBlockchainPurchased;
  },
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–æ—à–µ–ª—å–∫–∞
  CRYPTO_WALLET: (state: GameState) => {
    // –ö–æ—à–µ–ª–µ–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ "–û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω–∞"
    const basicBlockchainPurchased = state.upgrades.basicBlockchain?.purchased ||
                                     state.upgrades.blockchain_basics?.purchased ||
                                     state.upgrades.blockchainBasics?.purchased;
    return !!basicBlockchainPurchased;
  },
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞–π–Ω–µ—Ä–∞
  AUTO_MINER: (state: GameState) => {
    // –ê–≤—Ç–æ–º–∞–π–Ω–µ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ "–û—Å–Ω–æ–≤—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"
    return (state.upgrades.cryptoCurrencyBasics?.purchased === true) || 
           (state.upgrades.cryptocurrency_basics?.purchased === true);
  },
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ—à–µ–ª—å–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞
  WALLET_SECURITY: (state: GameState) => {
    return state.buildings.cryptoWallet && state.buildings.cryptoWallet.count > 0;
  },
  
  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–∞–π–Ω–µ—Ä–∞
  ALGORITHM_OPTIMIZATION: (state: GameState) => {
    return state.buildings.autoMiner && state.buildings.autoMiner.count > 0;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∑–¥–∞–Ω–∏–π
export function checkBuildingUnlocks(state: GameState): GameState {
  const newBuildings = { ...state.buildings };
  let hasChanges = false;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∑–¥–∞–Ω–∏–µ
  Object.entries(newBuildings).forEach(([buildingId, building]) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è
    if (building.unlocked) return;

    let shouldUnlock = false;

    // –û—Å–æ–±—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π
    switch (buildingId) {
      case "generator":
        // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è 11 USDT
        shouldUnlock = state.resources.usdt && state.resources.usdt.value >= 11;
        break;
        
      case "homeComputer":
        // –î–æ–º–∞—à–Ω–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ 10+ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞
        shouldUnlock = state.resources.electricity && 
                      state.resources.electricity.unlocked && 
                      state.resources.electricity.value >= 10;
        break;
        
      case "coolingSystem":
        // –°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ 2+ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
        shouldUnlock = state.buildings.homeComputer && 
                      state.buildings.homeComputer.count >= 2;
        break;
        
      case "practice":
        // –ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ 2+ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è"
        shouldUnlock = UNLOCK_SEQUENCES.PRACTICE(state);
        break;
        
      case "cryptoWallet":
        // –ö–æ—à–µ–ª–µ–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ "–û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω–∞"
        shouldUnlock = UNLOCK_SEQUENCES.CRYPTO_WALLET(state);
        break;
        
      case "autoMiner":
        // –ê–≤—Ç–æ–º–∞–π–Ω–µ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ "–û—Å–Ω–æ–≤—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"
        shouldUnlock = UNLOCK_SEQUENCES.AUTO_MINER(state);
        break;
        
      default:
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–¥–∞–Ω–∏–π
        if (building.requirements) {
          shouldUnlock = checkUnlockCondition(state, {
            resources: Object.entries(building.requirements)
              .filter(([key]) => state.resources[key])
              .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {}),
              
            buildingCount: Object.entries(building.requirements)
              .filter(([key]) => key.endsWith('Count') && state.buildings[key.replace('Count', '')])
              .reduce((acc, [key, value]) => ({ ...acc, [key.replace('Count', '')]: value }), {}),
              
            upgrades: Object.keys(building.requirements)
              .filter(key => state.upgrades[key])
          });
        }
    }

    if (shouldUnlock) {
      newBuildings[buildingId] = {
        ...building,
        unlocked: true
      };
      hasChanges = true;
      console.log(`üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∑–¥–∞–Ω–∏–µ: ${building.name}`);
      safeDispatchGameEvent(`–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ: ${building.name}`, "info");
    }
  });

  if (hasChanges) {
    return {
      ...state,
      buildings: newBuildings
    };
  }

  return state;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
export function checkUpgradeUnlocks(state: GameState): GameState {
  const newUpgrades = { ...state.upgrades };
  let hasChanges = false;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
  Object.entries(newUpgrades).forEach(([upgradeId, upgrade]) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    if (upgrade.unlocked || upgrade.purchased) return;

    let shouldUnlock = false;

    // –û—Å–æ–±—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    switch (upgradeId) {
      case "basicBlockchain":
      case "blockchain_basics":
      case "blockchainBasics":
        // "–û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω–∞" —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        shouldUnlock = UNLOCK_SEQUENCES.BASIC_BLOCKCHAIN(state);
        break;
        
      case "cryptoCurrencyBasics":
      case "cryptocurrency_basics":
        // "–û—Å–Ω–æ–≤—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç" —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ "–û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω–∞"
        shouldUnlock = UNLOCK_SEQUENCES.CRYPTO_CURRENCY_BASICS(state);
        break;
        
      case "walletSecurity":
      case "cryptoWalletSecurity":
        // "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–æ–≤" —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞
        shouldUnlock = UNLOCK_SEQUENCES.WALLET_SECURITY(state);
        break;
        
      case "algorithmOptimization":
        // "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤" —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–∞–π–Ω–µ—Ä–∞
        shouldUnlock = UNLOCK_SEQUENCES.ALGORITHM_OPTIMIZATION(state);
        break;
        
      default:
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
        if (upgrade.requiredUpgrades && upgrade.requiredUpgrades.length > 0) {
          shouldUnlock = upgrade.requiredUpgrades.every(
            reqId => state.upgrades[reqId] && state.upgrades[reqId].purchased
          );
        } else if (upgrade.requirements) {
          shouldUnlock = checkUnlockCondition(state, {
            buildingCount: Object.entries(upgrade.requirements)
              .filter(([key]) => key.endsWith('Count') && state.buildings[key.replace('Count', '')])
              .reduce((acc, [key, value]) => ({ ...acc, [key.replace('Count', '')]: value }), {}),
              
            upgrades: Object.keys(upgrade.requirements)
              .filter(key => state.upgrades[key] && !key.endsWith('Count'))
          });
        } else if (upgrade.unlockCondition) {
          shouldUnlock = checkUnlockCondition(state, upgrade.unlockCondition);
        }
    }

    if (shouldUnlock) {
      newUpgrades[upgradeId] = {
        ...upgrade,
        unlocked: true
      };
      hasChanges = true;
      console.log(`üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: ${upgrade.name}`);
      safeDispatchGameEvent(`–î–æ—Å—Ç—É–ø–Ω–æ –Ω–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: ${upgrade.name}`, "info");
    }
  });

  if (hasChanges) {
    return {
      ...state,
      upgrades: newUpgrades
    };
  }

  return state;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
export function checkAllUnlocks(state: GameState): GameState {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –∑–¥–∞–Ω–∏—è
  let newState = checkUpgradeUnlocks(state);
  // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–∞–Ω–∏—è
  newState = checkBuildingUnlocks(newState);
  return newState;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ—Å–æ–±—ã—Ö —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
export function checkSpecialUnlocks(state: GameState): GameState {
  let newState = { ...state };
  
  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è" –ø–æ—Å–ª–µ 3-—Ö –∫–ª–∏–∫–æ–≤ –Ω–∞ "–ò–∑—É—á–∏—Ç—å –∫—Ä–∏–ø—Ç—É"
  if (!newState.unlocks.applyKnowledge && 
      newState.resources.knowledge && 
      newState.resources.knowledge.value >= 3) {
    console.log("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è'");
    newState = {
      ...newState,
      unlocks: {
        ...newState.unlocks,
        applyKnowledge: true
      }
    };
    safeDispatchGameEvent("–û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è", "info");
  }
  
  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ "–ü—Ä–∞–∫—Ç–∏–∫–∞" –ø–æ—Å–ª–µ 2-—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è"
  if (!newState.unlocks.practice && UNLOCK_SEQUENCES.PRACTICE(newState)) {
    console.log("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è '–ü—Ä–∞–∫—Ç–∏–∫–∞'");
    newState = {
      ...newState,
      unlocks: {
        ...newState.unlocks,
        practice: true
      }
    };
    
    // –¢–∞–∫–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∑–¥–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
    if (newState.buildings.practice) {
      newState.buildings.practice = {
        ...newState.buildings.practice,
        unlocked: true
      };
    }
    
    safeDispatchGameEvent("–û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ü—Ä–∞–∫—Ç–∏–∫–∞", "info");
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–æ–±—ã–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
  // –ù–∞–ø—Ä–∏–º–µ—Ä, —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
  if (newState.buildings.generator && 
      newState.buildings.generator.count > 0 && 
      !newState.resources.electricity.unlocked) {
    newState.resources.electricity = {
      ...newState.resources.electricity,
      unlocked: true
    };
    safeDispatchGameEvent("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ä–µ—Å—É—Ä—Å: –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "info");
  }
  
  // –í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
  if (newState.buildings.homeComputer && 
      newState.buildings.homeComputer.count > 0 && 
      !newState.resources.computingPower.unlocked) {
    newState.resources.computingPower = {
      ...newState.resources.computingPower,
      unlocked: true
    };
    safeDispatchGameEvent("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ä–µ—Å—É—Ä—Å: –í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å", "info");
  }
  
  // BTC —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–∞–π–Ω–µ—Ä–∞
  if (newState.buildings.autoMiner && 
      newState.buildings.autoMiner.count > 0 && 
      !newState.resources.btc.unlocked) {
    newState.resources.btc = {
      ...newState.resources.btc,
      unlocked: true
    };
    safeDispatchGameEvent("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ä–µ—Å—É—Ä—Å: Bitcoin (BTC)", "info");
  }
  
  return newState;
}
