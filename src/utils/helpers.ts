// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
export const formatNumber = (num: number): string => {
  if (num === Infinity) return "‚àû";
  
  if (num >= 1e12) {
    return Math.floor(num / 1e12) + "T";
  } else if (num >= 1e9) {
    return Math.floor(num / 1e9) + "B";
  } else if (num >= 1e6) {
    return Math.floor(num / 1e6) + "M";
  } else if (num >= 1e3) {
    return Math.floor(num / 1e3) + "K";
  } else if (num % 1 !== 0) {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ—Å—è—Ç–∏—á–Ω–∞—è —á–∞—Å—Ç—å
    return num.toFixed(2);
  } else {
    return Math.floor(num).toString();
  }
};

// –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞
export const calculateTimeToReach = (
  currentValue: number,
  targetValue: number,
  perSecond: number
): string => {
  if (perSecond <= 0) return "‚àû";
  const seconds = (targetValue - currentValue) / perSecond;
  
  if (seconds < 60) {
    return `${Math.ceil(seconds)} —Å–µ–∫`;
  } else if (seconds < 3600) {
    return `${Math.ceil(seconds / 60)} –º–∏–Ω`;
  } else if (seconds < 86400) {
    return `${Math.ceil(seconds / 3600)} —á`;
  } else {
    return `${Math.ceil(seconds / 86400)} –¥`;
  }
};

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å –∫–ª—é—á–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
import { GAME_STORAGE_KEY } from '@/context/utils/gameStorage';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã –≤ localStorage
export const saveGame = (gameState: any) => {
  try {
    localStorage.setItem(GAME_STORAGE_KEY, JSON.stringify(gameState));
    console.log('‚úÖ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage —á–µ—Ä–µ–∑ helpers.saveGame');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–≥—Ä—ã –≤ localStorage:', error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã –∏–∑ localStorage
export const loadGame = (): any | null => {
  try {
    const savedGame = localStorage.getItem(GAME_STORAGE_KEY);
    if (!savedGame) {
      console.log('‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ localStorage');
      return null;
    }
    
    const parsedGame = JSON.parse(savedGame);
    console.log('‚úÖ –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ localStorage —á–µ—Ä–µ–∑ helpers.loadGame');
    return parsedGame;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã –∏–∑ localStorage:", error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã
export const resetGame = () => {
  try {
    localStorage.removeItem(GAME_STORAGE_KEY);
    console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ localStorage —á–µ—Ä–µ–∑ helpers.resetGame');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑ localStorage:', error);
    return false;
  }
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID
export const generateId = (): string => {
  return Math.random().toString(36).substr(2, 9);
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
export const checkUnlockConditions = (
  resources: { [key: string]: number },
  requirements: { [key: string]: number }
): boolean => {
  for (const [resourceId, requiredAmount] of Object.entries(requirements)) {
    if (!resources[resourceId] || resources[resourceId] < requiredAmount) {
      return false;
    }
  }
  return true;
};

// –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤
export const calculateEfficiency = (
  baseValue: number,
  boostPercent: number
): number => {
  return baseValue * (1 + boostPercent / 100);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ–∫—É–ø–∫—É
export const canAfford = (
  resources: { [key: string]: number },
  costs: { [key: string]: number }
): boolean => {
  for (const [resourceId, cost] of Object.entries(costs)) {
    if (!resources[resourceId] || resources[resourceId] < cost) {
      return false;
    }
  }
  return true;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
export const getNextMilestone = (currentScore: number, milestones: number[]): number => {
  for (const milestone of milestones) {
    if (milestone > currentScore) {
      return milestone;
    }
  }
  return Infinity;
};

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Telegram WebApp API —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export const isTelegramWebAppAvailable = (): boolean => {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –∫–æ–¥ –≤ Telegram WebApp
  if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Telegram WebApp
    if (process.env.NODE_ENV === 'development' && !window.__FORCE_TELEGRAM_MODE) {
      console.log('‚ÑπÔ∏è –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: Telegram WebApp –æ—Ç–∫–ª—é—á–µ–Ω');
      return false;
    }
    
    console.log('–í–ê–ñ–ù–û: Telegram WebApp API –æ–±–Ω–∞—Ä—É–∂–µ–Ω!');
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ –≤–µ—Ä—Å–∏–∏
    if (window.Telegram.WebApp.platform) {
      console.log(`Telegram –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${window.Telegram.WebApp.platform}`);
    }
    
    if (window.Telegram.WebApp.version) {
      console.log(`Telegram –≤–µ—Ä—Å–∏—è: ${window.Telegram.WebApp.version}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ initData
    if (window.Telegram.WebApp.initData) {
      console.log(`Telegram initData –¥–ª–∏–Ω–∞: ${window.Telegram.WebApp.initData.length}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      if (window.Telegram.WebApp.initDataUnsafe?.user) {
        const user = window.Telegram.WebApp.initDataUnsafe.user;
        console.log(`Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID=${user.id}, –∏–º—è=${user.first_name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      } else {
        console.warn('Telegram –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      }
    } else {
      console.warn('Telegram initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è CloudStorage
    if (window.Telegram.WebApp.CloudStorage) {
      console.log('Telegram CloudStorage API –¥–æ—Å—Ç—É–ø–µ–Ω!');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ—Ç–æ–¥–æ–≤ CloudStorage
      if (typeof window.Telegram.WebApp.CloudStorage.getItem === 'function') {
        console.log('- –º–µ—Ç–æ–¥ getItem –¥–æ—Å—Ç—É–ø–µ–Ω');
      } else {
        console.warn('- –º–µ—Ç–æ–¥ getItem –ù–ï–î–û–°–¢–£–ü–ï–ù');
      }
      
      if (typeof window.Telegram.WebApp.CloudStorage.setItem === 'function') {
        console.log('- –º–µ—Ç–æ–¥ setItem –¥–æ—Å—Ç—É–ø–µ–Ω');
      } else {
        console.warn('- –º–µ—Ç–æ–¥ setItem –ù–ï–î–û–°–¢–£–ü–ï–ù');
      }
    } else {
      console.warn('Telegram CloudStorage API –ù–ï–î–û–°–¢–£–ü–ï–ù');
    }
    
    return true;
  }
  
  console.log('Telegram WebApp API –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
  return false;
};

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram CloudStorage
export const isTelegramCloudStorageAvailable = (): boolean => {
  if (!isTelegramWebAppAvailable()) {
    console.log('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, CloudStorage —Ç–æ–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    return false;
  }
  
  try {
    const hasCloudStorage = !!window.Telegram?.WebApp?.CloudStorage;
    const hasGetItem = typeof window.Telegram?.WebApp?.CloudStorage?.getItem === 'function';
    const hasSetItem = typeof window.Telegram?.WebApp?.CloudStorage?.setItem === 'function';
    
    const isAvailable = hasCloudStorage && hasGetItem && hasSetItem;
    
    if (isAvailable) {
      console.log('Telegram CloudStorage –ø–æ–ª–Ω–æ—Å—Ç—å—é –î–û–°–¢–£–ü–ï–ù');
    } else {
      console.warn('Telegram CloudStorage –ù–ï –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–µ–Ω:', {
        hasCloudStorage,
        hasGetItem,
        hasSetItem
      });
    }
    
    return isAvailable;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram CloudStorage:', error);
    return false;
  }
};

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
const cloudSaveOperations: Record<string, boolean> = {};

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Telegram CloudStorage —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏
export const forceTelegramCloudSave = async (data: string, key: string): Promise<boolean> => {
  if (!isTelegramCloudStorageAvailable()) {
    console.warn('‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CloudStorage –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ - API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    return false;
  }
  
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É –∫–ª—é—á—É
  if (cloudSaveOperations[key]) {
    console.warn(`‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –∫–ª—é—á–∞ ${key} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
    return false;
  }
  
  cloudSaveOperations[key] = true;
  
  try {
    console.log(`üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Telegram CloudStorage (${data.length} –±–∞–π—Ç)...`);
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CloudStorage (–æ–∫–æ–ª–æ 4KB —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    const MAX_CHUNK_SIZE = 4000;
    
    if (data.length > MAX_CHUNK_SIZE) {
      console.log(`‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –¥–ª—è Telegram CloudStorage (${data.length} –±–∞–π—Ç), —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–±ÔøΩÔøΩ–µ–Ω–∏–∏
      const chunks = Math.ceil(data.length / MAX_CHUNK_SIZE);
      const meta = JSON.stringify({
        chunks: chunks,
        totalSize: data.length,
        timestamp: Date.now()
      });
      
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      try {
        await window.Telegram.WebApp.CloudStorage.setItem(`${key}_meta`, meta);
        console.log(`‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${chunks} —á–∞—Å—Ç–µ–π`);
      } catch (metaError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', metaError);
        cloudSaveOperations[key] = false;
        return false;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å CloudStorage
      for (let i = 0; i < chunks; i++) {
        const start = i * MAX_CHUNK_SIZE;
        const end = Math.min((i + 1) * MAX_CHUNK_SIZE, data.length);
        const chunk = data.substring(start, end);
        
        try {
          await window.Telegram.WebApp.CloudStorage.setItem(`${key}_${i}`, chunk);
          console.log(`‚úÖ –ß–∞—Å—Ç—å ${i+1}/${chunks} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (${chunk.length} –±–∞–π—Ç)`);
        } catch (chunkError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞—Å—Ç–∏ ${i+1}/${chunks}:`, chunkError);
          cloudSaveOperations[key] = false;
          return false;
        }
      }
      
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ ${chunks} —á–∞—Å—Ç–µ–π`);
      cloudSaveOperations[key] = false;
      return true;
    } else {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –º–∞–ª–µ–Ω—å–∫–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
      try {
        await window.Telegram.WebApp.CloudStorage.setItem(key, data);
        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (${data.length} –±–∞–π—Ç)`);
        
        // –£–¥–∞–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        try {
          await window.Telegram.WebApp.CloudStorage.removeItem(`${key}_meta`);
        } catch (cleanupError) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
        }
        
        cloudSaveOperations[key] = false;
        return true;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        cloudSaveOperations[key] = false;
        return false;
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Telegram CloudStorage:', error);
    cloudSaveOperations[key] = false;
    return false;
  }
};

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–≥—Ä—É–∑–∫–∏
const cloudLoadOperations: Record<string, boolean> = {};

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Telegram CloudStorage —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–±–∏–µ–Ω–∏—è
export const forceTelegramCloudLoad = async (key: string): Promise<string | null> => {
  if (!isTelegramCloudStorageAvailable()) {
    console.warn('‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ CloudStorage –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ - API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    return null;
  }
  
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É –∫–ª—é—á—É
  if (cloudLoadOperations[key]) {
    console.warn(`‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∫–ª—é—á–∞ ${key} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
    return null;
  }
  
  cloudLoadOperations[key] = true;
  
  try {
    console.log(`üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Telegram CloudStorage (–∫–ª—é—á: ${key})...`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–±–∏–µ–Ω–∏–∏
    let metaData = null;
    try {
      const metaStr = await window.Telegram.WebApp.CloudStorage.getItem(`${key}_meta`);
      if (metaStr) {
        metaData = JSON.parse(metaStr);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${metaData.chunks} —á–∞—Å—Ç–µ–π, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä ${metaData.totalSize} –±–∞–π—Ç`);
      }
    } catch (metaError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', metaError);
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, —Å–æ–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–∏
    if (metaData && metaData.chunks) {
      let completeData = '';
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
      for (let i = 0; i < metaData.chunks; i++) {
        try {
          const chunkKey = `${key}_${i}`;
          const chunk = await window.Telegram.WebApp.CloudStorage.getItem(chunkKey);
          
          if (chunk === null) {
            console.error(`‚ùå –ß–∞—Å—Ç—å ${i+1}/${metaData.chunks} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
            cloudLoadOperations[key] = false;
            return null;
          }
          
          completeData += chunk;
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —á–∞—Å—Ç—å ${i+1}/${metaData.chunks} (${chunk.length} –±–∞–π—Ç)`);
        } catch (chunkError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Å—Ç–∏ ${i+1}/${metaData.chunks}:`, chunkError);
          cloudLoadOperations[key] = false;
          return null;
        }
      }
      
      console.log(`‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã (${completeData.length}/${metaData.totalSize} –±–∞–π—Ç)`);
      cloudLoadOperations[key] = false;
      return completeData;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Ö –∑–∞–≥—Ä—É–∑–∏—Ç—å, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥—Ä—É–∑–∫—É
    try {
      const data = await window.Telegram.WebApp.CloudStorage.getItem(key);
      
      if (data === null) {
        console.log('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        cloudLoadOperations[key] = false;
        return null;
      }
      
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (${data.length} –±–∞–π—Ç)`);
      cloudLoadOperations[key] = false;
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      cloudLoadOperations[key] = false;
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ Telegram CloudStorage:', error);
    cloudLoadOperations[key] = false;
    return null;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
export const getPlatformInfo = (): string => {
  if (isTelegramWebAppAvailable()) {
    const platform = window.Telegram.WebApp.platform || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const version = window.Telegram.WebApp.version || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    return `Telegram WebApp (${platform}, v${version})`;
  }
  
  if (typeof navigator !== 'undefined') {
    return `Browser: ${navigator.userAgent}`;
  }
  
  return 'Unknown platform';
};

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –æ–∫–Ω–∞
declare global {
  interface Window {
    __FORCE_TELEGRAM_MODE?: boolean;
  }
}
