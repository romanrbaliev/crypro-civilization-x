
import { GameState } from '@/context/types';
import { UnlockManager } from '@/systems/unlock/UnlockManager';
import { debugPracticeBuilding, listAllBuildings } from './buildingDebugUtils';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö
 */
export function debugUnlockStatus(state: GameState): { steps: string[], unlocked: string[], locked: string[] } {
  try {
    // –î–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–∫—É –¥–ª—è –∑–¥–∞–Ω–∏—è "–ü—Ä–∞–∫—Ç–∏–∫–∞"
    const practiceDebug = debugPracticeBuilding(state);
    console.log("–û—Ç–ª–∞–¥–∫–∞ –∑–¥–∞–Ω–∏—è –ü—Ä–∞–∫—Ç–∏–∫–∞:", practiceDebug);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π
    const allBuildings = listAllBuildings(state);
    console.log("–í—Å–µ –∑–¥–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏:", allBuildings);
    
    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º –æ—Ç–ª–∞–¥–∫–∏
    const unlockManager = new UnlockManager(state, true);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    unlockManager.forceCheckAllUnlocks();
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    return unlockManager.getUnlockReport();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫:', error);
    return { 
      steps: [`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: ${error}`],
      unlocked: [],
      locked: []
    };
  }
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 */
export function forceCheckUnlocks(state: GameState): GameState {
  try {
    const unlockManager = new UnlockManager(state);
    return unlockManager.forceCheckAllUnlocks();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫:', error);
    return state;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
 */
export function checkItemUnlock(state: GameState, itemId: string): boolean {
  try {
    const unlockManager = new UnlockManager(state);
    return unlockManager.isUnlocked(itemId);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ ${itemId}:`, error);
    return false;
  }
}

/**
 * –û—Ç–ª–∞–¥–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∑–Ω–∞–Ω–∏–π
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –∏ –∏—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 */
export function debugKnowledgeProduction(state: GameState): { steps: string[], finalValue: number } {
  try {
    const steps: string[] = [];
    let finalValue = 0;
    
    steps.push('üìä –ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∑–Ω–∞–Ω–∏–π');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
    const baseProduction = state.resources.knowledge?.baseProduction || 0;
    steps.push(`‚Ä¢ –ë–∞–∑–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: ${baseProduction.toFixed(2)}/—Å–µ–∫`);
    finalValue += baseProduction;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –æ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏
    if (state.buildings.practice && state.buildings.practice.unlocked) {
      const practiceCount = state.buildings.practice.count || 0;
      const practiceProduction = practiceCount * 1; // 1 –∑–Ω–∞–Ω–∏–µ –∑–∞ –ø—Ä–∞–∫—Ç–∏–∫—É
      
      steps.push(`‚Ä¢ –ó–¥–∞–Ω–∏–µ "–ü—Ä–∞–∫—Ç–∏–∫–∞" (${practiceCount} —à—Ç.): +${practiceProduction.toFixed(2)}/—Å–µ–∫`);
      finalValue += practiceProduction;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å –æ—Ç "–û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω–∞"
      const hasBlockchainBasics = 
        (state.upgrades.blockchainBasics?.purchased === true) || 
        (state.upgrades.basicBlockchain?.purchased === true) || 
        (state.upgrades.blockchain_basics?.purchased === true);
      
      if (hasBlockchainBasics && practiceProduction > 0) {
        const bonus = practiceProduction * 0.1; // +10% –±–æ–Ω—É—Å –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É –∑–Ω–∞–Ω–∏–π
        steps.push(`‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ "–û—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω–∞": +${bonus.toFixed(2)}/—Å–µ–∫ (+10%)`);
        finalValue += bonus;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å –æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∫–∞–Ω–∞–ª–∞
      if (state.buildings.internetChannel && state.buildings.internetChannel.count > 0 && state.buildings.internetChannel.unlocked) {
        const internetChannelCount = state.buildings.internetChannel.count;
        const currentKnowledgeValue = finalValue; // –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –±–æ–Ω—É—Å–∞
        
        // +20% –∫ –∑–Ω–∞–Ω–∏—è–º –∑–∞ –∫–∞–∂–¥—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∫–∞–Ω–∞–ª
        const internetBonus = currentKnowledgeValue * 0.2 * internetChannelCount;
        steps.push(`‚Ä¢ –ó–¥–∞–Ω–∏–µ "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∫–∞–Ω–∞–ª" (${internetChannelCount} —à—Ç.): +${internetBonus.toFixed(2)}/—Å–µ–∫ (+20% –∑–∞ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª)`);
        finalValue += internetBonus;
      }
    } else {
      steps.push('‚ö†Ô∏è –ó–¥–∞–Ω–∏–µ "–ü—Ä–∞–∫—Ç–∏–∫–∞" –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if (state.specialization === 'analyst') {
      const currentValue = finalValue;
      const bonusValue = currentValue * 0.25; // +25% –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
      
      steps.push(`‚Ä¢ –ë–æ–Ω—É—Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ "–ê–Ω–∞–ª–∏—Ç–∏–∫": +${bonusValue.toFixed(2)}/—Å–µ–∫ (+25%)`);
      finalValue += bonusValue;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –±–æ–Ω—É—Å—ã –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (state.specialization === 'influencer') {
      const currentValue = finalValue;
      const bonusValue = currentValue * 0.1; // +10% –∫–æ –≤—Å–µ–º —Ä–µ—Å—É—Ä—Å–∞–º
      
      steps.push(`‚Ä¢ –ë–æ–Ω—É—Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ "–ò–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä": +${bonusValue.toFixed(2)}/—Å–µ–∫ (+10%)`);
      finalValue += bonusValue;
    } else if (state.specialization === 'investor') {
      const currentValue = finalValue;
      const bonusValue = currentValue * 0.05; // +5% –∫–æ –≤—Å–µ–º —Ä–µ—Å—É—Ä—Å–∞–º
      
      steps.push(`‚Ä¢ –ë–æ–Ω—É—Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ "–ò–Ω–≤–µ—Å—Ç–æ—Ä": +${bonusValue.toFixed(2)}/—Å–µ–∫ (+5%)`);
      finalValue += bonusValue;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    steps.push(`–ò—Ç–æ–≥–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∑–Ω–∞–Ω–∏–π: ${finalValue.toFixed(2)}/—Å–µ–∫`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    const currentPerSecond = state.resources.knowledge?.perSecond || 0;
    if (Math.abs(finalValue - currentPerSecond) > 0.01) {
      steps.push(`‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: –†–∞—Å—á–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ${finalValue.toFixed(2)}/—Å–µ–∫ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ ${currentPerSecond.toFixed(2)}/—Å–µ–∫`);
    } else {
      steps.push(`‚úÖ –†–∞—Å—á–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ${finalValue.toFixed(2)}/—Å–µ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É ${currentPerSecond.toFixed(2)}/—Å–µ–∫`);
    }
    
    return { steps, finalValue };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∑–Ω–∞–Ω–∏–π:', error);
    return { 
      steps: [`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∑–Ω–∞–Ω–∏–π: ${error}`],
      finalValue: 0
    };
  }
}
