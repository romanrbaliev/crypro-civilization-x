
import { GameState } from '@/context/types';
import { saveGameState } from '@/context/utils/gameStorage';

let lastSaveTime = 0;
let isSavingInProgress = false;

export const saveGame = async (gameState: GameState, hasConnection: boolean): Promise<boolean> => {
  if (!hasConnection) {
    console.log('‚ö†Ô∏è –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ');
    return false;
  }
  
  if (isSavingInProgress) {
    console.log('‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
    return false;
  }
  
  const now = Date.now();
  if (now - lastSaveTime < 2000) {
    console.log(`‚è±Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø—Ä–æ—à–ª–æ ${now - lastSaveTime}–º—Å)`);
    return false;
  }
  
  isSavingInProgress = true;
  lastSaveTime = now;
  
  try {
    console.log(`üîÑ –ó–∞–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã (—Ä–∞–∑–º–µ—Ä: ~${JSON.stringify(gameState).length}b)`);
    
    const success = await saveGameState(gameState);
    
    if (success) {
      console.log('‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      return true;
    } else {
      console.warn('‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–≥—Ä—ã');
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
    return false;
  } finally {
    isSavingInProgress = false;
  }
};
